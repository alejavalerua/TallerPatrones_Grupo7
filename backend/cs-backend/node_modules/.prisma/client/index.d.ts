
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model priority
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type priority = $Result.DefaultSelection<Prisma.$priorityPayload>
/**
 * Model profiles
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type profiles = $Result.DefaultSelection<Prisma.$profilesPayload>
/**
 * Model roles
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type roles = $Result.DefaultSelection<Prisma.$rolesPayload>
/**
 * Model ticket_status
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type ticket_status = $Result.DefaultSelection<Prisma.$ticket_statusPayload>
/**
 * Model tickets
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type tickets = $Result.DefaultSelection<Prisma.$ticketsPayload>
/**
 * Model message
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type message = $Result.DefaultSelection<Prisma.$messagePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Priorities
 * const priorities = await prisma.priority.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Priorities
   * const priorities = await prisma.priority.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.priority`: Exposes CRUD operations for the **priority** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Priorities
    * const priorities = await prisma.priority.findMany()
    * ```
    */
  get priority(): Prisma.priorityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.profilesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.rolesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_status`: Exposes CRUD operations for the **ticket_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_statuses
    * const ticket_statuses = await prisma.ticket_status.findMany()
    * ```
    */
  get ticket_status(): Prisma.ticket_statusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.ticketsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    priority: 'priority',
    profiles: 'profiles',
    roles: 'roles',
    ticket_status: 'ticket_status',
    tickets: 'tickets',
    message: 'message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "priority" | "profiles" | "roles" | "ticket_status" | "tickets" | "message"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      priority: {
        payload: Prisma.$priorityPayload<ExtArgs>
        fields: Prisma.priorityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.priorityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.priorityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          findFirst: {
            args: Prisma.priorityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.priorityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          findMany: {
            args: Prisma.priorityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>[]
          }
          create: {
            args: Prisma.priorityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          createMany: {
            args: Prisma.priorityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.priorityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>[]
          }
          delete: {
            args: Prisma.priorityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          update: {
            args: Prisma.priorityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          deleteMany: {
            args: Prisma.priorityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.priorityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.priorityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>[]
          }
          upsert: {
            args: Prisma.priorityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$priorityPayload>
          }
          aggregate: {
            args: Prisma.PriorityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriority>
          }
          groupBy: {
            args: Prisma.priorityGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriorityGroupByOutputType>[]
          }
          count: {
            args: Prisma.priorityCountArgs<ExtArgs>
            result: $Utils.Optional<PriorityCountAggregateOutputType> | number
          }
        }
      }
      profiles: {
        payload: Prisma.$profilesPayload<ExtArgs>
        fields: Prisma.profilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.profilesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.profilesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          findFirst: {
            args: Prisma.profilesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.profilesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          findMany: {
            args: Prisma.profilesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>[]
          }
          create: {
            args: Prisma.profilesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          createMany: {
            args: Prisma.profilesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.profilesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>[]
          }
          delete: {
            args: Prisma.profilesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          update: {
            args: Prisma.profilesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          deleteMany: {
            args: Prisma.profilesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.profilesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.profilesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>[]
          }
          upsert: {
            args: Prisma.profilesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profilesPayload>
          }
          aggregate: {
            args: Prisma.ProfilesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfiles>
          }
          groupBy: {
            args: Prisma.profilesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.profilesCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilesCountAggregateOutputType> | number
          }
        }
      }
      roles: {
        payload: Prisma.$rolesPayload<ExtArgs>
        fields: Prisma.rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findFirst: {
            args: Prisma.rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findMany: {
            args: Prisma.rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          create: {
            args: Prisma.rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          createMany: {
            args: Prisma.rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          delete: {
            args: Prisma.rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          update: {
            args: Prisma.rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          deleteMany: {
            args: Prisma.rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.rolesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          upsert: {
            args: Prisma.rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.rolesCountArgs<ExtArgs>
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      ticket_status: {
        payload: Prisma.$ticket_statusPayload<ExtArgs>
        fields: Prisma.ticket_statusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_statusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_statusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          findFirst: {
            args: Prisma.ticket_statusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_statusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          findMany: {
            args: Prisma.ticket_statusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>[]
          }
          create: {
            args: Prisma.ticket_statusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          createMany: {
            args: Prisma.ticket_statusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticket_statusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>[]
          }
          delete: {
            args: Prisma.ticket_statusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          update: {
            args: Prisma.ticket_statusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          deleteMany: {
            args: Prisma.ticket_statusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_statusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticket_statusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>[]
          }
          upsert: {
            args: Prisma.ticket_statusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_statusPayload>
          }
          aggregate: {
            args: Prisma.Ticket_statusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_status>
          }
          groupBy: {
            args: Prisma.ticket_statusGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_statusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_statusCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_statusCountAggregateOutputType> | number
          }
        }
      }
      tickets: {
        payload: Prisma.$ticketsPayload<ExtArgs>
        fields: Prisma.ticketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findFirst: {
            args: Prisma.ticketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findMany: {
            args: Prisma.ticketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          create: {
            args: Prisma.ticketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          createMany: {
            args: Prisma.ticketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          delete: {
            args: Prisma.ticketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          update: {
            args: Prisma.ticketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          deleteMany: {
            args: Prisma.ticketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticketsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          upsert: {
            args: Prisma.ticketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.ticketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      message: {
        payload: Prisma.$messagePayload<ExtArgs>
        fields: Prisma.messageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findFirst: {
            args: Prisma.messageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findMany: {
            args: Prisma.messageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          create: {
            args: Prisma.messageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          createMany: {
            args: Prisma.messageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.messageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          delete: {
            args: Prisma.messageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          update: {
            args: Prisma.messageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          deleteMany: {
            args: Prisma.messageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.messageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.messageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          upsert: {
            args: Prisma.messageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.messageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.messageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    priority?: priorityOmit
    profiles?: profilesOmit
    roles?: rolesOmit
    ticket_status?: ticket_statusOmit
    tickets?: ticketsOmit
    message?: messageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PriorityCountOutputType
   */

  export type PriorityCountOutputType = {
    tickets_tickets_priorityTopriority: number
  }

  export type PriorityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets_tickets_priorityTopriority?: boolean | PriorityCountOutputTypeCountTickets_tickets_priorityTopriorityArgs
  }

  // Custom InputTypes
  /**
   * PriorityCountOutputType without action
   */
  export type PriorityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriorityCountOutputType
     */
    select?: PriorityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PriorityCountOutputType without action
   */
  export type PriorityCountOutputTypeCountTickets_tickets_priorityTopriorityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }


  /**
   * Count Type ProfilesCountOutputType
   */

  export type ProfilesCountOutputType = {
    message: number
    tickets_tickets_assignee_idToprofiles: number
    tickets_tickets_customer_idToprofiles: number
  }

  export type ProfilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | ProfilesCountOutputTypeCountMessageArgs
    tickets_tickets_assignee_idToprofiles?: boolean | ProfilesCountOutputTypeCountTickets_tickets_assignee_idToprofilesArgs
    tickets_tickets_customer_idToprofiles?: boolean | ProfilesCountOutputTypeCountTickets_tickets_customer_idToprofilesArgs
  }

  // Custom InputTypes
  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilesCountOutputType
     */
    select?: ProfilesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountTickets_tickets_assignee_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountTickets_tickets_customer_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }


  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    profiles: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | RolesCountOutputTypeCountProfilesArgs
  }

  // Custom InputTypes
  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: profilesWhereInput
  }


  /**
   * Count Type Ticket_statusCountOutputType
   */

  export type Ticket_statusCountOutputType = {
    tickets: number
  }

  export type Ticket_statusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Ticket_statusCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * Ticket_statusCountOutputType without action
   */
  export type Ticket_statusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_statusCountOutputType
     */
    select?: Ticket_statusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Ticket_statusCountOutputType without action
   */
  export type Ticket_statusCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }


  /**
   * Count Type TicketsCountOutputType
   */

  export type TicketsCountOutputType = {
    message: number
  }

  export type TicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | TicketsCountOutputTypeCountMessageArgs
  }

  // Custom InputTypes
  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model priority
   */

  export type AggregatePriority = {
    _count: PriorityCountAggregateOutputType | null
    _avg: PriorityAvgAggregateOutputType | null
    _sum: PrioritySumAggregateOutputType | null
    _min: PriorityMinAggregateOutputType | null
    _max: PriorityMaxAggregateOutputType | null
  }

  export type PriorityAvgAggregateOutputType = {
    id: number | null
  }

  export type PrioritySumAggregateOutputType = {
    id: bigint | null
  }

  export type PriorityMinAggregateOutputType = {
    id: bigint | null
    priority: string | null
  }

  export type PriorityMaxAggregateOutputType = {
    id: bigint | null
    priority: string | null
  }

  export type PriorityCountAggregateOutputType = {
    id: number
    priority: number
    _all: number
  }


  export type PriorityAvgAggregateInputType = {
    id?: true
  }

  export type PrioritySumAggregateInputType = {
    id?: true
  }

  export type PriorityMinAggregateInputType = {
    id?: true
    priority?: true
  }

  export type PriorityMaxAggregateInputType = {
    id?: true
    priority?: true
  }

  export type PriorityCountAggregateInputType = {
    id?: true
    priority?: true
    _all?: true
  }

  export type PriorityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which priority to aggregate.
     */
    where?: priorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of priorities to fetch.
     */
    orderBy?: priorityOrderByWithRelationInput | priorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: priorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` priorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` priorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned priorities
    **/
    _count?: true | PriorityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriorityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrioritySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriorityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriorityMaxAggregateInputType
  }

  export type GetPriorityAggregateType<T extends PriorityAggregateArgs> = {
        [P in keyof T & keyof AggregatePriority]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriority[P]>
      : GetScalarType<T[P], AggregatePriority[P]>
  }




  export type priorityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: priorityWhereInput
    orderBy?: priorityOrderByWithAggregationInput | priorityOrderByWithAggregationInput[]
    by: PriorityScalarFieldEnum[] | PriorityScalarFieldEnum
    having?: priorityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriorityCountAggregateInputType | true
    _avg?: PriorityAvgAggregateInputType
    _sum?: PrioritySumAggregateInputType
    _min?: PriorityMinAggregateInputType
    _max?: PriorityMaxAggregateInputType
  }

  export type PriorityGroupByOutputType = {
    id: bigint
    priority: string
    _count: PriorityCountAggregateOutputType | null
    _avg: PriorityAvgAggregateOutputType | null
    _sum: PrioritySumAggregateOutputType | null
    _min: PriorityMinAggregateOutputType | null
    _max: PriorityMaxAggregateOutputType | null
  }

  type GetPriorityGroupByPayload<T extends priorityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriorityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriorityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriorityGroupByOutputType[P]>
            : GetScalarType<T[P], PriorityGroupByOutputType[P]>
        }
      >
    >


  export type prioritySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    priority?: boolean
    tickets_tickets_priorityTopriority?: boolean | priority$tickets_tickets_priorityTopriorityArgs<ExtArgs>
    _count?: boolean | PriorityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priority"]>

  export type prioritySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    priority?: boolean
  }, ExtArgs["result"]["priority"]>

  export type prioritySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    priority?: boolean
  }, ExtArgs["result"]["priority"]>

  export type prioritySelectScalar = {
    id?: boolean
    priority?: boolean
  }

  export type priorityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "priority", ExtArgs["result"]["priority"]>
  export type priorityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets_tickets_priorityTopriority?: boolean | priority$tickets_tickets_priorityTopriorityArgs<ExtArgs>
    _count?: boolean | PriorityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type priorityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type priorityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $priorityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "priority"
    objects: {
      tickets_tickets_priorityTopriority: Prisma.$ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      priority: string
    }, ExtArgs["result"]["priority"]>
    composites: {}
  }

  type priorityGetPayload<S extends boolean | null | undefined | priorityDefaultArgs> = $Result.GetResult<Prisma.$priorityPayload, S>

  type priorityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<priorityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriorityCountAggregateInputType | true
    }

  export interface priorityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['priority'], meta: { name: 'priority' } }
    /**
     * Find zero or one Priority that matches the filter.
     * @param {priorityFindUniqueArgs} args - Arguments to find a Priority
     * @example
     * // Get one Priority
     * const priority = await prisma.priority.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends priorityFindUniqueArgs>(args: SelectSubset<T, priorityFindUniqueArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Priority that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {priorityFindUniqueOrThrowArgs} args - Arguments to find a Priority
     * @example
     * // Get one Priority
     * const priority = await prisma.priority.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends priorityFindUniqueOrThrowArgs>(args: SelectSubset<T, priorityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Priority that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityFindFirstArgs} args - Arguments to find a Priority
     * @example
     * // Get one Priority
     * const priority = await prisma.priority.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends priorityFindFirstArgs>(args?: SelectSubset<T, priorityFindFirstArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Priority that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityFindFirstOrThrowArgs} args - Arguments to find a Priority
     * @example
     * // Get one Priority
     * const priority = await prisma.priority.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends priorityFindFirstOrThrowArgs>(args?: SelectSubset<T, priorityFindFirstOrThrowArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Priorities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Priorities
     * const priorities = await prisma.priority.findMany()
     * 
     * // Get first 10 Priorities
     * const priorities = await prisma.priority.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priorityWithIdOnly = await prisma.priority.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends priorityFindManyArgs>(args?: SelectSubset<T, priorityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Priority.
     * @param {priorityCreateArgs} args - Arguments to create a Priority.
     * @example
     * // Create one Priority
     * const Priority = await prisma.priority.create({
     *   data: {
     *     // ... data to create a Priority
     *   }
     * })
     * 
     */
    create<T extends priorityCreateArgs>(args: SelectSubset<T, priorityCreateArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Priorities.
     * @param {priorityCreateManyArgs} args - Arguments to create many Priorities.
     * @example
     * // Create many Priorities
     * const priority = await prisma.priority.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends priorityCreateManyArgs>(args?: SelectSubset<T, priorityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Priorities and returns the data saved in the database.
     * @param {priorityCreateManyAndReturnArgs} args - Arguments to create many Priorities.
     * @example
     * // Create many Priorities
     * const priority = await prisma.priority.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Priorities and only return the `id`
     * const priorityWithIdOnly = await prisma.priority.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends priorityCreateManyAndReturnArgs>(args?: SelectSubset<T, priorityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Priority.
     * @param {priorityDeleteArgs} args - Arguments to delete one Priority.
     * @example
     * // Delete one Priority
     * const Priority = await prisma.priority.delete({
     *   where: {
     *     // ... filter to delete one Priority
     *   }
     * })
     * 
     */
    delete<T extends priorityDeleteArgs>(args: SelectSubset<T, priorityDeleteArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Priority.
     * @param {priorityUpdateArgs} args - Arguments to update one Priority.
     * @example
     * // Update one Priority
     * const priority = await prisma.priority.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends priorityUpdateArgs>(args: SelectSubset<T, priorityUpdateArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Priorities.
     * @param {priorityDeleteManyArgs} args - Arguments to filter Priorities to delete.
     * @example
     * // Delete a few Priorities
     * const { count } = await prisma.priority.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends priorityDeleteManyArgs>(args?: SelectSubset<T, priorityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Priorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Priorities
     * const priority = await prisma.priority.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends priorityUpdateManyArgs>(args: SelectSubset<T, priorityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Priorities and returns the data updated in the database.
     * @param {priorityUpdateManyAndReturnArgs} args - Arguments to update many Priorities.
     * @example
     * // Update many Priorities
     * const priority = await prisma.priority.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Priorities and only return the `id`
     * const priorityWithIdOnly = await prisma.priority.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends priorityUpdateManyAndReturnArgs>(args: SelectSubset<T, priorityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Priority.
     * @param {priorityUpsertArgs} args - Arguments to update or create a Priority.
     * @example
     * // Update or create a Priority
     * const priority = await prisma.priority.upsert({
     *   create: {
     *     // ... data to create a Priority
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Priority we want to update
     *   }
     * })
     */
    upsert<T extends priorityUpsertArgs>(args: SelectSubset<T, priorityUpsertArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Priorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityCountArgs} args - Arguments to filter Priorities to count.
     * @example
     * // Count the number of Priorities
     * const count = await prisma.priority.count({
     *   where: {
     *     // ... the filter for the Priorities we want to count
     *   }
     * })
    **/
    count<T extends priorityCountArgs>(
      args?: Subset<T, priorityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriorityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Priority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriorityAggregateArgs>(args: Subset<T, PriorityAggregateArgs>): Prisma.PrismaPromise<GetPriorityAggregateType<T>>

    /**
     * Group by Priority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {priorityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends priorityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: priorityGroupByArgs['orderBy'] }
        : { orderBy?: priorityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, priorityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriorityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the priority model
   */
  readonly fields: priorityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for priority.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__priorityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets_tickets_priorityTopriority<T extends priority$tickets_tickets_priorityTopriorityArgs<ExtArgs> = {}>(args?: Subset<T, priority$tickets_tickets_priorityTopriorityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the priority model
   */
  interface priorityFieldRefs {
    readonly id: FieldRef<"priority", 'BigInt'>
    readonly priority: FieldRef<"priority", 'String'>
  }
    

  // Custom InputTypes
  /**
   * priority findUnique
   */
  export type priorityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter, which priority to fetch.
     */
    where: priorityWhereUniqueInput
  }

  /**
   * priority findUniqueOrThrow
   */
  export type priorityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter, which priority to fetch.
     */
    where: priorityWhereUniqueInput
  }

  /**
   * priority findFirst
   */
  export type priorityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter, which priority to fetch.
     */
    where?: priorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of priorities to fetch.
     */
    orderBy?: priorityOrderByWithRelationInput | priorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for priorities.
     */
    cursor?: priorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` priorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` priorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of priorities.
     */
    distinct?: PriorityScalarFieldEnum | PriorityScalarFieldEnum[]
  }

  /**
   * priority findFirstOrThrow
   */
  export type priorityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter, which priority to fetch.
     */
    where?: priorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of priorities to fetch.
     */
    orderBy?: priorityOrderByWithRelationInput | priorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for priorities.
     */
    cursor?: priorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` priorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` priorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of priorities.
     */
    distinct?: PriorityScalarFieldEnum | PriorityScalarFieldEnum[]
  }

  /**
   * priority findMany
   */
  export type priorityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter, which priorities to fetch.
     */
    where?: priorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of priorities to fetch.
     */
    orderBy?: priorityOrderByWithRelationInput | priorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing priorities.
     */
    cursor?: priorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` priorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` priorities.
     */
    skip?: number
    distinct?: PriorityScalarFieldEnum | PriorityScalarFieldEnum[]
  }

  /**
   * priority create
   */
  export type priorityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * The data needed to create a priority.
     */
    data: XOR<priorityCreateInput, priorityUncheckedCreateInput>
  }

  /**
   * priority createMany
   */
  export type priorityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many priorities.
     */
    data: priorityCreateManyInput | priorityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * priority createManyAndReturn
   */
  export type priorityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * The data used to create many priorities.
     */
    data: priorityCreateManyInput | priorityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * priority update
   */
  export type priorityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * The data needed to update a priority.
     */
    data: XOR<priorityUpdateInput, priorityUncheckedUpdateInput>
    /**
     * Choose, which priority to update.
     */
    where: priorityWhereUniqueInput
  }

  /**
   * priority updateMany
   */
  export type priorityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update priorities.
     */
    data: XOR<priorityUpdateManyMutationInput, priorityUncheckedUpdateManyInput>
    /**
     * Filter which priorities to update
     */
    where?: priorityWhereInput
    /**
     * Limit how many priorities to update.
     */
    limit?: number
  }

  /**
   * priority updateManyAndReturn
   */
  export type priorityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * The data used to update priorities.
     */
    data: XOR<priorityUpdateManyMutationInput, priorityUncheckedUpdateManyInput>
    /**
     * Filter which priorities to update
     */
    where?: priorityWhereInput
    /**
     * Limit how many priorities to update.
     */
    limit?: number
  }

  /**
   * priority upsert
   */
  export type priorityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * The filter to search for the priority to update in case it exists.
     */
    where: priorityWhereUniqueInput
    /**
     * In case the priority found by the `where` argument doesn't exist, create a new priority with this data.
     */
    create: XOR<priorityCreateInput, priorityUncheckedCreateInput>
    /**
     * In case the priority was found with the provided `where` argument, update it with this data.
     */
    update: XOR<priorityUpdateInput, priorityUncheckedUpdateInput>
  }

  /**
   * priority delete
   */
  export type priorityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
    /**
     * Filter which priority to delete.
     */
    where: priorityWhereUniqueInput
  }

  /**
   * priority deleteMany
   */
  export type priorityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which priorities to delete
     */
    where?: priorityWhereInput
    /**
     * Limit how many priorities to delete.
     */
    limit?: number
  }

  /**
   * priority.tickets_tickets_priorityTopriority
   */
  export type priority$tickets_tickets_priorityTopriorityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * priority without action
   */
  export type priorityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the priority
     */
    select?: prioritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the priority
     */
    omit?: priorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: priorityInclude<ExtArgs> | null
  }


  /**
   * Model profiles
   */

  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesAvgAggregateOutputType = {
    id: number | null
    role: number | null
  }

  export type ProfilesSumAggregateOutputType = {
    id: bigint | null
    role: number | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: bigint | null
    created_at: Date | null
    email: string | null
    name: string | null
    role: number | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: bigint | null
    created_at: Date | null
    email: string | null
    name: string | null
    role: number | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    created_at: number
    email: number
    name: number
    role: number
    _all: number
  }


  export type ProfilesAvgAggregateInputType = {
    id?: true
    role?: true
  }

  export type ProfilesSumAggregateInputType = {
    id?: true
    role?: true
  }

  export type ProfilesMinAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    name?: true
    role?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    name?: true
    role?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    name?: true
    role?: true
    _all?: true
  }

  export type ProfilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which profiles to aggregate.
     */
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: profilesOrderByWithRelationInput | profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type profilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: profilesWhereInput
    orderBy?: profilesOrderByWithAggregationInput | profilesOrderByWithAggregationInput[]
    by: ProfilesScalarFieldEnum[] | ProfilesScalarFieldEnum
    having?: profilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _avg?: ProfilesAvgAggregateInputType
    _sum?: ProfilesSumAggregateInputType
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }

  export type ProfilesGroupByOutputType = {
    id: bigint
    created_at: Date
    email: string
    name: string | null
    role: number
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends profilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type profilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    message?: boolean | profiles$messageArgs<ExtArgs>
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    tickets_tickets_assignee_idToprofiles?: boolean | profiles$tickets_tickets_assignee_idToprofilesArgs<ExtArgs>
    tickets_tickets_customer_idToprofiles?: boolean | profiles$tickets_tickets_customer_idToprofilesArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type profilesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    roles?: boolean | rolesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type profilesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    roles?: boolean | rolesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type profilesSelectScalar = {
    id?: boolean
    created_at?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
  }

  export type profilesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "email" | "name" | "role", ExtArgs["result"]["profiles"]>
  export type profilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | profiles$messageArgs<ExtArgs>
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    tickets_tickets_assignee_idToprofiles?: boolean | profiles$tickets_tickets_assignee_idToprofilesArgs<ExtArgs>
    tickets_tickets_customer_idToprofiles?: boolean | profiles$tickets_tickets_customer_idToprofilesArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type profilesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | rolesDefaultArgs<ExtArgs>
  }
  export type profilesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | rolesDefaultArgs<ExtArgs>
  }

  export type $profilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "profiles"
    objects: {
      message: Prisma.$messagePayload<ExtArgs>[]
      roles: Prisma.$rolesPayload<ExtArgs>
      tickets_tickets_assignee_idToprofiles: Prisma.$ticketsPayload<ExtArgs>[]
      tickets_tickets_customer_idToprofiles: Prisma.$ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      created_at: Date
      email: string
      name: string | null
      role: number
    }, ExtArgs["result"]["profiles"]>
    composites: {}
  }

  type profilesGetPayload<S extends boolean | null | undefined | profilesDefaultArgs> = $Result.GetResult<Prisma.$profilesPayload, S>

  type profilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<profilesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilesCountAggregateInputType | true
    }

  export interface profilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['profiles'], meta: { name: 'profiles' } }
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {profilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends profilesFindUniqueArgs>(args: SelectSubset<T, profilesFindUniqueArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profiles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {profilesFindUniqueOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends profilesFindUniqueOrThrowArgs>(args: SelectSubset<T, profilesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends profilesFindFirstArgs>(args?: SelectSubset<T, profilesFindFirstArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindFirstOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends profilesFindFirstOrThrowArgs>(args?: SelectSubset<T, profilesFindFirstOrThrowArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends profilesFindManyArgs>(args?: SelectSubset<T, profilesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profiles.
     * @param {profilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
     */
    create<T extends profilesCreateArgs>(args: SelectSubset<T, profilesCreateArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {profilesCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profiles = await prisma.profiles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends profilesCreateManyArgs>(args?: SelectSubset<T, profilesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {profilesCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profiles = await prisma.profiles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profilesWithIdOnly = await prisma.profiles.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends profilesCreateManyAndReturnArgs>(args?: SelectSubset<T, profilesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profiles.
     * @param {profilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
     */
    delete<T extends profilesDeleteArgs>(args: SelectSubset<T, profilesDeleteArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profiles.
     * @param {profilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends profilesUpdateArgs>(args: SelectSubset<T, profilesUpdateArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {profilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends profilesDeleteManyArgs>(args?: SelectSubset<T, profilesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends profilesUpdateManyArgs>(args: SelectSubset<T, profilesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {profilesUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profilesWithIdOnly = await prisma.profiles.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends profilesUpdateManyAndReturnArgs>(args: SelectSubset<T, profilesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profiles.
     * @param {profilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
     */
    upsert<T extends profilesUpsertArgs>(args: SelectSubset<T, profilesUpsertArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends profilesCountArgs>(
      args?: Subset<T, profilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): Prisma.PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends profilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: profilesGroupByArgs['orderBy'] }
        : { orderBy?: profilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, profilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the profiles model
   */
  readonly fields: profilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__profilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends profiles$messageArgs<ExtArgs> = {}>(args?: Subset<T, profiles$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends rolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, rolesDefaultArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tickets_tickets_assignee_idToprofiles<T extends profiles$tickets_tickets_assignee_idToprofilesArgs<ExtArgs> = {}>(args?: Subset<T, profiles$tickets_tickets_assignee_idToprofilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets_tickets_customer_idToprofiles<T extends profiles$tickets_tickets_customer_idToprofilesArgs<ExtArgs> = {}>(args?: Subset<T, profiles$tickets_tickets_customer_idToprofilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the profiles model
   */
  interface profilesFieldRefs {
    readonly id: FieldRef<"profiles", 'BigInt'>
    readonly created_at: FieldRef<"profiles", 'DateTime'>
    readonly email: FieldRef<"profiles", 'String'>
    readonly name: FieldRef<"profiles", 'String'>
    readonly role: FieldRef<"profiles", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * profiles findUnique
   */
  export type profilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter, which profiles to fetch.
     */
    where: profilesWhereUniqueInput
  }

  /**
   * profiles findUniqueOrThrow
   */
  export type profilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter, which profiles to fetch.
     */
    where: profilesWhereUniqueInput
  }

  /**
   * profiles findFirst
   */
  export type profilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter, which profiles to fetch.
     */
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: profilesOrderByWithRelationInput | profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     */
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * profiles findFirstOrThrow
   */
  export type profilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter, which profiles to fetch.
     */
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: profilesOrderByWithRelationInput | profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     */
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * profiles findMany
   */
  export type profilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter, which profiles to fetch.
     */
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: profilesOrderByWithRelationInput | profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profiles.
     */
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * profiles create
   */
  export type profilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * The data needed to create a profiles.
     */
    data: XOR<profilesCreateInput, profilesUncheckedCreateInput>
  }

  /**
   * profiles createMany
   */
  export type profilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many profiles.
     */
    data: profilesCreateManyInput | profilesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * profiles createManyAndReturn
   */
  export type profilesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * The data used to create many profiles.
     */
    data: profilesCreateManyInput | profilesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * profiles update
   */
  export type profilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * The data needed to update a profiles.
     */
    data: XOR<profilesUpdateInput, profilesUncheckedUpdateInput>
    /**
     * Choose, which profiles to update.
     */
    where: profilesWhereUniqueInput
  }

  /**
   * profiles updateMany
   */
  export type profilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update profiles.
     */
    data: XOR<profilesUpdateManyMutationInput, profilesUncheckedUpdateManyInput>
    /**
     * Filter which profiles to update
     */
    where?: profilesWhereInput
    /**
     * Limit how many profiles to update.
     */
    limit?: number
  }

  /**
   * profiles updateManyAndReturn
   */
  export type profilesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * The data used to update profiles.
     */
    data: XOR<profilesUpdateManyMutationInput, profilesUncheckedUpdateManyInput>
    /**
     * Filter which profiles to update
     */
    where?: profilesWhereInput
    /**
     * Limit how many profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * profiles upsert
   */
  export type profilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * The filter to search for the profiles to update in case it exists.
     */
    where: profilesWhereUniqueInput
    /**
     * In case the profiles found by the `where` argument doesn't exist, create a new profiles with this data.
     */
    create: XOR<profilesCreateInput, profilesUncheckedCreateInput>
    /**
     * In case the profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<profilesUpdateInput, profilesUncheckedUpdateInput>
  }

  /**
   * profiles delete
   */
  export type profilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    /**
     * Filter which profiles to delete.
     */
    where: profilesWhereUniqueInput
  }

  /**
   * profiles deleteMany
   */
  export type profilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which profiles to delete
     */
    where?: profilesWhereInput
    /**
     * Limit how many profiles to delete.
     */
    limit?: number
  }

  /**
   * profiles.message
   */
  export type profiles$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * profiles.tickets_tickets_assignee_idToprofiles
   */
  export type profiles$tickets_tickets_assignee_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * profiles.tickets_tickets_customer_idToprofiles
   */
  export type profiles$tickets_tickets_customer_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * profiles without action
   */
  export type profilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
  }


  /**
   * Model roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    role: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    role?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    role?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    role?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to aggregate.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithAggregationInput | rolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: number
    role: string | null
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    profiles?: boolean | roles$profilesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectScalar = {
    id?: boolean
    role?: boolean
  }

  export type rolesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role", ExtArgs["result"]["roles"]>
  export type rolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | roles$profilesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type rolesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type rolesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "roles"
    objects: {
      profiles: Prisma.$profilesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: string | null
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }

  type rolesGetPayload<S extends boolean | null | undefined | rolesDefaultArgs> = $Result.GetResult<Prisma.$rolesPayload, S>

  type rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['roles'], meta: { name: 'roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rolesFindUniqueArgs>(args: SelectSubset<T, rolesFindUniqueArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Roles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rolesFindFirstArgs>(args?: SelectSubset<T, rolesFindFirstArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends rolesFindManyArgs>(args?: SelectSubset<T, rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Roles.
     * @param {rolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
     */
    create<T extends rolesCreateArgs>(args: SelectSubset<T, rolesCreateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {rolesCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rolesCreateManyArgs>(args?: SelectSubset<T, rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {rolesCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const rolesWithIdOnly = await prisma.roles.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Roles.
     * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
     */
    delete<T extends rolesDeleteArgs>(args: SelectSubset<T, rolesDeleteArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Roles.
     * @param {rolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rolesUpdateArgs>(args: SelectSubset<T, rolesUpdateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rolesDeleteManyArgs>(args?: SelectSubset<T, rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rolesUpdateManyArgs>(args: SelectSubset<T, rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {rolesUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const rolesWithIdOnly = await prisma.roles.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends rolesUpdateManyAndReturnArgs>(args: SelectSubset<T, rolesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Roles.
     * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
     */
    upsert<T extends rolesUpsertArgs>(args: SelectSubset<T, rolesUpsertArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends rolesCountArgs>(
      args?: Subset<T, rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rolesGroupByArgs['orderBy'] }
        : { orderBy?: rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the roles model
   */
  readonly fields: rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends roles$profilesArgs<ExtArgs> = {}>(args?: Subset<T, roles$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the roles model
   */
  interface rolesFieldRefs {
    readonly id: FieldRef<"roles", 'Int'>
    readonly role: FieldRef<"roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * roles findUnique
   */
  export type rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findUniqueOrThrow
   */
  export type rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findFirst
   */
  export type rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findFirstOrThrow
   */
  export type rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findMany
   */
  export type rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles create
   */
  export type rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to create a roles.
     */
    data?: XOR<rolesCreateInput, rolesUncheckedCreateInput>
  }

  /**
   * roles createMany
   */
  export type rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: rolesCreateManyInput | rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * roles createManyAndReturn
   */
  export type rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * The data used to create many roles.
     */
    data: rolesCreateManyInput | rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * roles update
   */
  export type rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to update a roles.
     */
    data: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
    /**
     * Choose, which roles to update.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles updateMany
   */
  export type rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * roles updateManyAndReturn
   */
  export type rolesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * The data used to update roles.
     */
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * roles upsert
   */
  export type rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The filter to search for the roles to update in case it exists.
     */
    where: rolesWhereUniqueInput
    /**
     * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
     */
    create: XOR<rolesCreateInput, rolesUncheckedCreateInput>
    /**
     * In case the roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
  }

  /**
   * roles delete
   */
  export type rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter which roles to delete.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles deleteMany
   */
  export type rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to delete.
     */
    limit?: number
  }

  /**
   * roles.profiles
   */
  export type roles$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    where?: profilesWhereInput
    orderBy?: profilesOrderByWithRelationInput | profilesOrderByWithRelationInput[]
    cursor?: profilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * roles without action
   */
  export type rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
  }


  /**
   * Model ticket_status
   */

  export type AggregateTicket_status = {
    _count: Ticket_statusCountAggregateOutputType | null
    _avg: Ticket_statusAvgAggregateOutputType | null
    _sum: Ticket_statusSumAggregateOutputType | null
    _min: Ticket_statusMinAggregateOutputType | null
    _max: Ticket_statusMaxAggregateOutputType | null
  }

  export type Ticket_statusAvgAggregateOutputType = {
    id: number | null
  }

  export type Ticket_statusSumAggregateOutputType = {
    id: bigint | null
  }

  export type Ticket_statusMinAggregateOutputType = {
    id: bigint | null
    status: string | null
  }

  export type Ticket_statusMaxAggregateOutputType = {
    id: bigint | null
    status: string | null
  }

  export type Ticket_statusCountAggregateOutputType = {
    id: number
    status: number
    _all: number
  }


  export type Ticket_statusAvgAggregateInputType = {
    id?: true
  }

  export type Ticket_statusSumAggregateInputType = {
    id?: true
  }

  export type Ticket_statusMinAggregateInputType = {
    id?: true
    status?: true
  }

  export type Ticket_statusMaxAggregateInputType = {
    id?: true
    status?: true
  }

  export type Ticket_statusCountAggregateInputType = {
    id?: true
    status?: true
    _all?: true
  }

  export type Ticket_statusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_status to aggregate.
     */
    where?: ticket_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_statuses to fetch.
     */
    orderBy?: ticket_statusOrderByWithRelationInput | ticket_statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_statuses
    **/
    _count?: true | Ticket_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_statusMaxAggregateInputType
  }

  export type GetTicket_statusAggregateType<T extends Ticket_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_status[P]>
      : GetScalarType<T[P], AggregateTicket_status[P]>
  }




  export type ticket_statusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_statusWhereInput
    orderBy?: ticket_statusOrderByWithAggregationInput | ticket_statusOrderByWithAggregationInput[]
    by: Ticket_statusScalarFieldEnum[] | Ticket_statusScalarFieldEnum
    having?: ticket_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_statusCountAggregateInputType | true
    _avg?: Ticket_statusAvgAggregateInputType
    _sum?: Ticket_statusSumAggregateInputType
    _min?: Ticket_statusMinAggregateInputType
    _max?: Ticket_statusMaxAggregateInputType
  }

  export type Ticket_statusGroupByOutputType = {
    id: bigint
    status: string
    _count: Ticket_statusCountAggregateOutputType | null
    _avg: Ticket_statusAvgAggregateOutputType | null
    _sum: Ticket_statusSumAggregateOutputType | null
    _min: Ticket_statusMinAggregateOutputType | null
    _max: Ticket_statusMaxAggregateOutputType | null
  }

  type GetTicket_statusGroupByPayload<T extends ticket_statusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_statusGroupByOutputType[P]>
        }
      >
    >


  export type ticket_statusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    tickets?: boolean | ticket_status$ticketsArgs<ExtArgs>
    _count?: boolean | Ticket_statusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_status"]>

  export type ticket_statusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
  }, ExtArgs["result"]["ticket_status"]>

  export type ticket_statusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
  }, ExtArgs["result"]["ticket_status"]>

  export type ticket_statusSelectScalar = {
    id?: boolean
    status?: boolean
  }

  export type ticket_statusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status", ExtArgs["result"]["ticket_status"]>
  export type ticket_statusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | ticket_status$ticketsArgs<ExtArgs>
    _count?: boolean | Ticket_statusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ticket_statusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ticket_statusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ticket_statusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_status"
    objects: {
      tickets: Prisma.$ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      status: string
    }, ExtArgs["result"]["ticket_status"]>
    composites: {}
  }

  type ticket_statusGetPayload<S extends boolean | null | undefined | ticket_statusDefaultArgs> = $Result.GetResult<Prisma.$ticket_statusPayload, S>

  type ticket_statusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_statusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_statusCountAggregateInputType | true
    }

  export interface ticket_statusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_status'], meta: { name: 'ticket_status' } }
    /**
     * Find zero or one Ticket_status that matches the filter.
     * @param {ticket_statusFindUniqueArgs} args - Arguments to find a Ticket_status
     * @example
     * // Get one Ticket_status
     * const ticket_status = await prisma.ticket_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_statusFindUniqueArgs>(args: SelectSubset<T, ticket_statusFindUniqueArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_statusFindUniqueOrThrowArgs} args - Arguments to find a Ticket_status
     * @example
     * // Get one Ticket_status
     * const ticket_status = await prisma.ticket_status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_statusFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_statusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusFindFirstArgs} args - Arguments to find a Ticket_status
     * @example
     * // Get one Ticket_status
     * const ticket_status = await prisma.ticket_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_statusFindFirstArgs>(args?: SelectSubset<T, ticket_statusFindFirstArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusFindFirstOrThrowArgs} args - Arguments to find a Ticket_status
     * @example
     * // Get one Ticket_status
     * const ticket_status = await prisma.ticket_status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_statusFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_statusFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_statuses
     * const ticket_statuses = await prisma.ticket_status.findMany()
     * 
     * // Get first 10 Ticket_statuses
     * const ticket_statuses = await prisma.ticket_status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_statusWithIdOnly = await prisma.ticket_status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_statusFindManyArgs>(args?: SelectSubset<T, ticket_statusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_status.
     * @param {ticket_statusCreateArgs} args - Arguments to create a Ticket_status.
     * @example
     * // Create one Ticket_status
     * const Ticket_status = await prisma.ticket_status.create({
     *   data: {
     *     // ... data to create a Ticket_status
     *   }
     * })
     * 
     */
    create<T extends ticket_statusCreateArgs>(args: SelectSubset<T, ticket_statusCreateArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_statuses.
     * @param {ticket_statusCreateManyArgs} args - Arguments to create many Ticket_statuses.
     * @example
     * // Create many Ticket_statuses
     * const ticket_status = await prisma.ticket_status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_statusCreateManyArgs>(args?: SelectSubset<T, ticket_statusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ticket_statuses and returns the data saved in the database.
     * @param {ticket_statusCreateManyAndReturnArgs} args - Arguments to create many Ticket_statuses.
     * @example
     * // Create many Ticket_statuses
     * const ticket_status = await prisma.ticket_status.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ticket_statuses and only return the `id`
     * const ticket_statusWithIdOnly = await prisma.ticket_status.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticket_statusCreateManyAndReturnArgs>(args?: SelectSubset<T, ticket_statusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket_status.
     * @param {ticket_statusDeleteArgs} args - Arguments to delete one Ticket_status.
     * @example
     * // Delete one Ticket_status
     * const Ticket_status = await prisma.ticket_status.delete({
     *   where: {
     *     // ... filter to delete one Ticket_status
     *   }
     * })
     * 
     */
    delete<T extends ticket_statusDeleteArgs>(args: SelectSubset<T, ticket_statusDeleteArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_status.
     * @param {ticket_statusUpdateArgs} args - Arguments to update one Ticket_status.
     * @example
     * // Update one Ticket_status
     * const ticket_status = await prisma.ticket_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_statusUpdateArgs>(args: SelectSubset<T, ticket_statusUpdateArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_statuses.
     * @param {ticket_statusDeleteManyArgs} args - Arguments to filter Ticket_statuses to delete.
     * @example
     * // Delete a few Ticket_statuses
     * const { count } = await prisma.ticket_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_statusDeleteManyArgs>(args?: SelectSubset<T, ticket_statusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_statuses
     * const ticket_status = await prisma.ticket_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_statusUpdateManyArgs>(args: SelectSubset<T, ticket_statusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_statuses and returns the data updated in the database.
     * @param {ticket_statusUpdateManyAndReturnArgs} args - Arguments to update many Ticket_statuses.
     * @example
     * // Update many Ticket_statuses
     * const ticket_status = await prisma.ticket_status.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ticket_statuses and only return the `id`
     * const ticket_statusWithIdOnly = await prisma.ticket_status.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticket_statusUpdateManyAndReturnArgs>(args: SelectSubset<T, ticket_statusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket_status.
     * @param {ticket_statusUpsertArgs} args - Arguments to update or create a Ticket_status.
     * @example
     * // Update or create a Ticket_status
     * const ticket_status = await prisma.ticket_status.upsert({
     *   create: {
     *     // ... data to create a Ticket_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_status we want to update
     *   }
     * })
     */
    upsert<T extends ticket_statusUpsertArgs>(args: SelectSubset<T, ticket_statusUpsertArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusCountArgs} args - Arguments to filter Ticket_statuses to count.
     * @example
     * // Count the number of Ticket_statuses
     * const count = await prisma.ticket_status.count({
     *   where: {
     *     // ... the filter for the Ticket_statuses we want to count
     *   }
     * })
    **/
    count<T extends ticket_statusCountArgs>(
      args?: Subset<T, ticket_statusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_statusAggregateArgs>(args: Subset<T, Ticket_statusAggregateArgs>): Prisma.PrismaPromise<GetTicket_statusAggregateType<T>>

    /**
     * Group by Ticket_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_statusGroupByArgs['orderBy'] }
        : { orderBy?: ticket_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_statusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_status model
   */
  readonly fields: ticket_statusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_statusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends ticket_status$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, ticket_status$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_status model
   */
  interface ticket_statusFieldRefs {
    readonly id: FieldRef<"ticket_status", 'BigInt'>
    readonly status: FieldRef<"ticket_status", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ticket_status findUnique
   */
  export type ticket_statusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter, which ticket_status to fetch.
     */
    where: ticket_statusWhereUniqueInput
  }

  /**
   * ticket_status findUniqueOrThrow
   */
  export type ticket_statusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter, which ticket_status to fetch.
     */
    where: ticket_statusWhereUniqueInput
  }

  /**
   * ticket_status findFirst
   */
  export type ticket_statusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter, which ticket_status to fetch.
     */
    where?: ticket_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_statuses to fetch.
     */
    orderBy?: ticket_statusOrderByWithRelationInput | ticket_statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_statuses.
     */
    cursor?: ticket_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_statuses.
     */
    distinct?: Ticket_statusScalarFieldEnum | Ticket_statusScalarFieldEnum[]
  }

  /**
   * ticket_status findFirstOrThrow
   */
  export type ticket_statusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter, which ticket_status to fetch.
     */
    where?: ticket_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_statuses to fetch.
     */
    orderBy?: ticket_statusOrderByWithRelationInput | ticket_statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_statuses.
     */
    cursor?: ticket_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_statuses.
     */
    distinct?: Ticket_statusScalarFieldEnum | Ticket_statusScalarFieldEnum[]
  }

  /**
   * ticket_status findMany
   */
  export type ticket_statusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter, which ticket_statuses to fetch.
     */
    where?: ticket_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_statuses to fetch.
     */
    orderBy?: ticket_statusOrderByWithRelationInput | ticket_statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_statuses.
     */
    cursor?: ticket_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_statuses.
     */
    skip?: number
    distinct?: Ticket_statusScalarFieldEnum | Ticket_statusScalarFieldEnum[]
  }

  /**
   * ticket_status create
   */
  export type ticket_statusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_status.
     */
    data: XOR<ticket_statusCreateInput, ticket_statusUncheckedCreateInput>
  }

  /**
   * ticket_status createMany
   */
  export type ticket_statusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_statuses.
     */
    data: ticket_statusCreateManyInput | ticket_statusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_status createManyAndReturn
   */
  export type ticket_statusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * The data used to create many ticket_statuses.
     */
    data: ticket_statusCreateManyInput | ticket_statusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_status update
   */
  export type ticket_statusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_status.
     */
    data: XOR<ticket_statusUpdateInput, ticket_statusUncheckedUpdateInput>
    /**
     * Choose, which ticket_status to update.
     */
    where: ticket_statusWhereUniqueInput
  }

  /**
   * ticket_status updateMany
   */
  export type ticket_statusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_statuses.
     */
    data: XOR<ticket_statusUpdateManyMutationInput, ticket_statusUncheckedUpdateManyInput>
    /**
     * Filter which ticket_statuses to update
     */
    where?: ticket_statusWhereInput
    /**
     * Limit how many ticket_statuses to update.
     */
    limit?: number
  }

  /**
   * ticket_status updateManyAndReturn
   */
  export type ticket_statusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * The data used to update ticket_statuses.
     */
    data: XOR<ticket_statusUpdateManyMutationInput, ticket_statusUncheckedUpdateManyInput>
    /**
     * Filter which ticket_statuses to update
     */
    where?: ticket_statusWhereInput
    /**
     * Limit how many ticket_statuses to update.
     */
    limit?: number
  }

  /**
   * ticket_status upsert
   */
  export type ticket_statusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_status to update in case it exists.
     */
    where: ticket_statusWhereUniqueInput
    /**
     * In case the ticket_status found by the `where` argument doesn't exist, create a new ticket_status with this data.
     */
    create: XOR<ticket_statusCreateInput, ticket_statusUncheckedCreateInput>
    /**
     * In case the ticket_status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_statusUpdateInput, ticket_statusUncheckedUpdateInput>
  }

  /**
   * ticket_status delete
   */
  export type ticket_statusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
    /**
     * Filter which ticket_status to delete.
     */
    where: ticket_statusWhereUniqueInput
  }

  /**
   * ticket_status deleteMany
   */
  export type ticket_statusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_statuses to delete
     */
    where?: ticket_statusWhereInput
    /**
     * Limit how many ticket_statuses to delete.
     */
    limit?: number
  }

  /**
   * ticket_status.tickets
   */
  export type ticket_status$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * ticket_status without action
   */
  export type ticket_statusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_status
     */
    select?: ticket_statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_status
     */
    omit?: ticket_statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_statusInclude<ExtArgs> | null
  }


  /**
   * Model tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    id: number | null
    status: number | null
    priority: number | null
    customer_id: number | null
    assignee_id: number | null
  }

  export type TicketsSumAggregateOutputType = {
    id: bigint | null
    status: bigint | null
    priority: bigint | null
    customer_id: bigint | null
    assignee_id: bigint | null
  }

  export type TicketsMinAggregateOutputType = {
    id: bigint | null
    title: string | null
    description: string | null
    status: bigint | null
    priority: bigint | null
    customer_id: bigint | null
    assignee_id: bigint | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: bigint | null
    title: string | null
    description: string | null
    status: bigint | null
    priority: bigint | null
    customer_id: bigint | null
    assignee_id: bigint | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    customer_id: number
    assignee_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    id?: true
    status?: true
    priority?: true
    customer_id?: true
    assignee_id?: true
  }

  export type TicketsSumAggregateInputType = {
    id?: true
    status?: true
    priority?: true
    customer_id?: true
    assignee_id?: true
  }

  export type TicketsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    customer_id?: true
    assignee_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    customer_id?: true
    assignee_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    customer_id?: true
    assignee_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to aggregate.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type ticketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithAggregationInput | ticketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: ticketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    id: bigint
    title: string
    description: string
    status: bigint
    priority: bigint
    customer_id: bigint | null
    assignee_id: bigint | null
    created_at: Date
    updated_at: Date | null
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends ticketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type ticketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    customer_id?: boolean
    assignee_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    message?: boolean | tickets$messageArgs<ExtArgs>
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type ticketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    customer_id?: boolean
    assignee_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type ticketsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    customer_id?: boolean
    assignee_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type ticketsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    customer_id?: boolean
    assignee_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ticketsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "customer_id" | "assignee_id" | "created_at" | "updated_at", ExtArgs["result"]["tickets"]>
  export type ticketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | tickets$messageArgs<ExtArgs>
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ticketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
  }
  export type ticketsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles_tickets_assignee_idToprofiles?: boolean | tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>
    profiles_tickets_customer_idToprofiles?: boolean | tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>
    priority_tickets_priorityTopriority?: boolean | priorityDefaultArgs<ExtArgs>
    ticket_status?: boolean | ticket_statusDefaultArgs<ExtArgs>
  }

  export type $ticketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tickets"
    objects: {
      message: Prisma.$messagePayload<ExtArgs>[]
      profiles_tickets_assignee_idToprofiles: Prisma.$profilesPayload<ExtArgs> | null
      profiles_tickets_customer_idToprofiles: Prisma.$profilesPayload<ExtArgs> | null
      priority_tickets_priorityTopriority: Prisma.$priorityPayload<ExtArgs>
      ticket_status: Prisma.$ticket_statusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      title: string
      description: string
      status: bigint
      priority: bigint
      customer_id: bigint | null
      assignee_id: bigint | null
      created_at: Date
      updated_at: Date | null
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type ticketsGetPayload<S extends boolean | null | undefined | ticketsDefaultArgs> = $Result.GetResult<Prisma.$ticketsPayload, S>

  type ticketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticketsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface ticketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tickets'], meta: { name: 'tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {ticketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketsFindUniqueArgs>(args: SelectSubset<T, ticketsFindUniqueArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketsFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketsFindFirstArgs>(args?: SelectSubset<T, ticketsFindFirstArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketsFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketsFindManyArgs>(args?: SelectSubset<T, ticketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tickets.
     * @param {ticketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends ticketsCreateArgs>(args: SelectSubset<T, ticketsCreateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {ticketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketsCreateManyArgs>(args?: SelectSubset<T, ticketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {ticketsCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketsWithIdOnly = await prisma.tickets.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticketsCreateManyAndReturnArgs>(args?: SelectSubset<T, ticketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tickets.
     * @param {ticketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends ticketsDeleteArgs>(args: SelectSubset<T, ticketsDeleteArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tickets.
     * @param {ticketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketsUpdateArgs>(args: SelectSubset<T, ticketsUpdateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {ticketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketsDeleteManyArgs>(args?: SelectSubset<T, ticketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketsUpdateManyArgs>(args: SelectSubset<T, ticketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {ticketsUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `id`
     * const ticketsWithIdOnly = await prisma.tickets.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticketsUpdateManyAndReturnArgs>(args: SelectSubset<T, ticketsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tickets.
     * @param {ticketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends ticketsUpsertArgs>(args: SelectSubset<T, ticketsUpsertArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends ticketsCountArgs>(
      args?: Subset<T, ticketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketsGroupByArgs['orderBy'] }
        : { orderBy?: ticketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tickets model
   */
  readonly fields: ticketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends tickets$messageArgs<ExtArgs> = {}>(args?: Subset<T, tickets$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profiles_tickets_assignee_idToprofiles<T extends tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs> = {}>(args?: Subset<T, tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    profiles_tickets_customer_idToprofiles<T extends tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs> = {}>(args?: Subset<T, tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    priority_tickets_priorityTopriority<T extends priorityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, priorityDefaultArgs<ExtArgs>>): Prisma__priorityClient<$Result.GetResult<Prisma.$priorityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket_status<T extends ticket_statusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticket_statusDefaultArgs<ExtArgs>>): Prisma__ticket_statusClient<$Result.GetResult<Prisma.$ticket_statusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tickets model
   */
  interface ticketsFieldRefs {
    readonly id: FieldRef<"tickets", 'BigInt'>
    readonly title: FieldRef<"tickets", 'String'>
    readonly description: FieldRef<"tickets", 'String'>
    readonly status: FieldRef<"tickets", 'BigInt'>
    readonly priority: FieldRef<"tickets", 'BigInt'>
    readonly customer_id: FieldRef<"tickets", 'BigInt'>
    readonly assignee_id: FieldRef<"tickets", 'BigInt'>
    readonly created_at: FieldRef<"tickets", 'DateTime'>
    readonly updated_at: FieldRef<"tickets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tickets findUnique
   */
  export type ticketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findUniqueOrThrow
   */
  export type ticketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findFirst
   */
  export type ticketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findFirstOrThrow
   */
  export type ticketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findMany
   */
  export type ticketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets create
   */
  export type ticketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to create a tickets.
     */
    data: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
  }

  /**
   * tickets createMany
   */
  export type ticketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tickets.
     */
    data: ticketsCreateManyInput | ticketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tickets createManyAndReturn
   */
  export type ticketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * The data used to create many tickets.
     */
    data: ticketsCreateManyInput | ticketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tickets update
   */
  export type ticketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to update a tickets.
     */
    data: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
    /**
     * Choose, which tickets to update.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets updateMany
   */
  export type ticketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketsWhereInput
    /**
     * Limit how many tickets to update.
     */
    limit?: number
  }

  /**
   * tickets updateManyAndReturn
   */
  export type ticketsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketsWhereInput
    /**
     * Limit how many tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * tickets upsert
   */
  export type ticketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The filter to search for the tickets to update in case it exists.
     */
    where: ticketsWhereUniqueInput
    /**
     * In case the tickets found by the `where` argument doesn't exist, create a new tickets with this data.
     */
    create: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
    /**
     * In case the tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
  }

  /**
   * tickets delete
   */
  export type ticketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter which tickets to delete.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets deleteMany
   */
  export type ticketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to delete
     */
    where?: ticketsWhereInput
    /**
     * Limit how many tickets to delete.
     */
    limit?: number
  }

  /**
   * tickets.message
   */
  export type tickets$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * tickets.profiles_tickets_assignee_idToprofiles
   */
  export type tickets$profiles_tickets_assignee_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    where?: profilesWhereInput
  }

  /**
   * tickets.profiles_tickets_customer_idToprofiles
   */
  export type tickets$profiles_tickets_customer_idToprofilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    where?: profilesWhereInput
  }

  /**
   * tickets without action
   */
  export type ticketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
  }


  /**
   * Model message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    sender_id: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: bigint | null
    ticket_id: bigint | null
    sender_id: bigint | null
  }

  export type MessageMinAggregateOutputType = {
    id: bigint | null
    content: string | null
    ticket_id: bigint | null
    sender_id: bigint | null
    created_at: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: bigint | null
    content: string | null
    ticket_id: bigint | null
    sender_id: bigint | null
    created_at: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    ticket_id: number
    sender_id: number
    created_at: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    sender_id?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    ticket_id?: true
    sender_id?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    ticket_id?: true
    sender_id?: true
    created_at?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    ticket_id?: true
    sender_id?: true
    created_at?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    ticket_id?: true
    sender_id?: true
    created_at?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which message to aggregate.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type messageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
    orderBy?: messageOrderByWithAggregationInput | messageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: bigint
    content: string
    ticket_id: bigint | null
    sender_id: bigint | null
    created_at: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends messageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    ticket_id?: boolean
    sender_id?: boolean
    created_at?: boolean
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    ticket_id?: boolean
    sender_id?: boolean
    created_at?: boolean
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    ticket_id?: boolean
    sender_id?: boolean
    created_at?: boolean
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectScalar = {
    id?: boolean
    content?: boolean
    ticket_id?: boolean
    sender_id?: boolean
    created_at?: boolean
  }

  export type messageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "ticket_id" | "sender_id" | "created_at", ExtArgs["result"]["message"]>
  export type messageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }
  export type messageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }
  export type messageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | message$profilesArgs<ExtArgs>
    tickets?: boolean | message$ticketsArgs<ExtArgs>
  }

  export type $messagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "message"
    objects: {
      profiles: Prisma.$profilesPayload<ExtArgs> | null
      tickets: Prisma.$ticketsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      content: string
      ticket_id: bigint | null
      sender_id: bigint | null
      created_at: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type messageGetPayload<S extends boolean | null | undefined | messageDefaultArgs> = $Result.GetResult<Prisma.$messagePayload, S>

  type messageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<messageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface messageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['message'], meta: { name: 'message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends messageFindUniqueArgs>(args: SelectSubset<T, messageFindUniqueArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs>(args: SelectSubset<T, messageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends messageFindFirstArgs>(args?: SelectSubset<T, messageFindFirstArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs>(args?: SelectSubset<T, messageFindFirstOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends messageFindManyArgs>(args?: SelectSubset<T, messageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends messageCreateArgs>(args: SelectSubset<T, messageCreateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {messageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends messageCreateManyArgs>(args?: SelectSubset<T, messageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {messageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends messageCreateManyAndReturnArgs>(args?: SelectSubset<T, messageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends messageDeleteArgs>(args: SelectSubset<T, messageDeleteArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends messageUpdateArgs>(args: SelectSubset<T, messageUpdateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends messageDeleteManyArgs>(args?: SelectSubset<T, messageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends messageUpdateManyArgs>(args: SelectSubset<T, messageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {messageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends messageUpdateManyAndReturnArgs>(args: SelectSubset<T, messageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends messageUpsertArgs>(args: SelectSubset<T, messageUpsertArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messageGroupByArgs['orderBy'] }
        : { orderBy?: messageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the message model
   */
  readonly fields: messageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__messageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends message$profilesArgs<ExtArgs> = {}>(args?: Subset<T, message$profilesArgs<ExtArgs>>): Prisma__profilesClient<$Result.GetResult<Prisma.$profilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tickets<T extends message$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, message$ticketsArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the message model
   */
  interface messageFieldRefs {
    readonly id: FieldRef<"message", 'BigInt'>
    readonly content: FieldRef<"message", 'String'>
    readonly ticket_id: FieldRef<"message", 'BigInt'>
    readonly sender_id: FieldRef<"message", 'BigInt'>
    readonly created_at: FieldRef<"message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * message findUnique
   */
  export type messageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findFirst
   */
  export type messageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findMany
   */
  export type messageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message create
   */
  export type messageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to create a message.
     */
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }

  /**
   * message createMany
   */
  export type messageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * message createManyAndReturn
   */
  export type messageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * message update
   */
  export type messageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to update a message.
     */
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message updateMany
   */
  export type messageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to update.
     */
    limit?: number
  }

  /**
   * message updateManyAndReturn
   */
  export type messageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * message upsert
   */
  export type messageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The filter to search for the message to update in case it exists.
     */
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     */
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }

  /**
   * message delete
   */
  export type messageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter which message to delete.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messageWhereInput
    /**
     * Limit how many messages to delete.
     */
    limit?: number
  }

  /**
   * message.profiles
   */
  export type message$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profiles
     */
    select?: profilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the profiles
     */
    omit?: profilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profilesInclude<ExtArgs> | null
    where?: profilesWhereInput
  }

  /**
   * message.tickets
   */
  export type message$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tickets
     */
    omit?: ticketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
  }

  /**
   * message without action
   */
  export type messageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the message
     */
    omit?: messageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PriorityScalarFieldEnum: {
    id: 'id',
    priority: 'priority'
  };

  export type PriorityScalarFieldEnum = (typeof PriorityScalarFieldEnum)[keyof typeof PriorityScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    email: 'email',
    name: 'name',
    role: 'role'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    role: 'role'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const Ticket_statusScalarFieldEnum: {
    id: 'id',
    status: 'status'
  };

  export type Ticket_statusScalarFieldEnum = (typeof Ticket_statusScalarFieldEnum)[keyof typeof Ticket_statusScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    customer_id: 'customer_id',
    assignee_id: 'assignee_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    ticket_id: 'ticket_id',
    sender_id: 'sender_id',
    created_at: 'created_at'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type priorityWhereInput = {
    AND?: priorityWhereInput | priorityWhereInput[]
    OR?: priorityWhereInput[]
    NOT?: priorityWhereInput | priorityWhereInput[]
    id?: BigIntFilter<"priority"> | bigint | number
    priority?: StringFilter<"priority"> | string
    tickets_tickets_priorityTopriority?: TicketsListRelationFilter
  }

  export type priorityOrderByWithRelationInput = {
    id?: SortOrder
    priority?: SortOrder
    tickets_tickets_priorityTopriority?: ticketsOrderByRelationAggregateInput
  }

  export type priorityWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: priorityWhereInput | priorityWhereInput[]
    OR?: priorityWhereInput[]
    NOT?: priorityWhereInput | priorityWhereInput[]
    priority?: StringFilter<"priority"> | string
    tickets_tickets_priorityTopriority?: TicketsListRelationFilter
  }, "id">

  export type priorityOrderByWithAggregationInput = {
    id?: SortOrder
    priority?: SortOrder
    _count?: priorityCountOrderByAggregateInput
    _avg?: priorityAvgOrderByAggregateInput
    _max?: priorityMaxOrderByAggregateInput
    _min?: priorityMinOrderByAggregateInput
    _sum?: prioritySumOrderByAggregateInput
  }

  export type priorityScalarWhereWithAggregatesInput = {
    AND?: priorityScalarWhereWithAggregatesInput | priorityScalarWhereWithAggregatesInput[]
    OR?: priorityScalarWhereWithAggregatesInput[]
    NOT?: priorityScalarWhereWithAggregatesInput | priorityScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"priority"> | bigint | number
    priority?: StringWithAggregatesFilter<"priority"> | string
  }

  export type profilesWhereInput = {
    AND?: profilesWhereInput | profilesWhereInput[]
    OR?: profilesWhereInput[]
    NOT?: profilesWhereInput | profilesWhereInput[]
    id?: BigIntFilter<"profiles"> | bigint | number
    created_at?: DateTimeFilter<"profiles"> | Date | string
    email?: StringFilter<"profiles"> | string
    name?: StringNullableFilter<"profiles"> | string | null
    role?: IntFilter<"profiles"> | number
    message?: MessageListRelationFilter
    roles?: XOR<RolesScalarRelationFilter, rolesWhereInput>
    tickets_tickets_assignee_idToprofiles?: TicketsListRelationFilter
    tickets_tickets_customer_idToprofiles?: TicketsListRelationFilter
  }

  export type profilesOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    message?: messageOrderByRelationAggregateInput
    roles?: rolesOrderByWithRelationInput
    tickets_tickets_assignee_idToprofiles?: ticketsOrderByRelationAggregateInput
    tickets_tickets_customer_idToprofiles?: ticketsOrderByRelationAggregateInput
  }

  export type profilesWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    AND?: profilesWhereInput | profilesWhereInput[]
    OR?: profilesWhereInput[]
    NOT?: profilesWhereInput | profilesWhereInput[]
    created_at?: DateTimeFilter<"profiles"> | Date | string
    name?: StringNullableFilter<"profiles"> | string | null
    role?: IntFilter<"profiles"> | number
    message?: MessageListRelationFilter
    roles?: XOR<RolesScalarRelationFilter, rolesWhereInput>
    tickets_tickets_assignee_idToprofiles?: TicketsListRelationFilter
    tickets_tickets_customer_idToprofiles?: TicketsListRelationFilter
  }, "id" | "email">

  export type profilesOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: profilesCountOrderByAggregateInput
    _avg?: profilesAvgOrderByAggregateInput
    _max?: profilesMaxOrderByAggregateInput
    _min?: profilesMinOrderByAggregateInput
    _sum?: profilesSumOrderByAggregateInput
  }

  export type profilesScalarWhereWithAggregatesInput = {
    AND?: profilesScalarWhereWithAggregatesInput | profilesScalarWhereWithAggregatesInput[]
    OR?: profilesScalarWhereWithAggregatesInput[]
    NOT?: profilesScalarWhereWithAggregatesInput | profilesScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"profiles"> | bigint | number
    created_at?: DateTimeWithAggregatesFilter<"profiles"> | Date | string
    email?: StringWithAggregatesFilter<"profiles"> | string
    name?: StringNullableWithAggregatesFilter<"profiles"> | string | null
    role?: IntWithAggregatesFilter<"profiles"> | number
  }

  export type rolesWhereInput = {
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    id?: IntFilter<"roles"> | number
    role?: StringNullableFilter<"roles"> | string | null
    profiles?: ProfilesListRelationFilter
  }

  export type rolesOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrderInput | SortOrder
    profiles?: profilesOrderByRelationAggregateInput
  }

  export type rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    role?: StringNullableFilter<"roles"> | string | null
    profiles?: ProfilesListRelationFilter
  }, "id">

  export type rolesOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: rolesCountOrderByAggregateInput
    _avg?: rolesAvgOrderByAggregateInput
    _max?: rolesMaxOrderByAggregateInput
    _min?: rolesMinOrderByAggregateInput
    _sum?: rolesSumOrderByAggregateInput
  }

  export type rolesScalarWhereWithAggregatesInput = {
    AND?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    OR?: rolesScalarWhereWithAggregatesInput[]
    NOT?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"roles"> | number
    role?: StringNullableWithAggregatesFilter<"roles"> | string | null
  }

  export type ticket_statusWhereInput = {
    AND?: ticket_statusWhereInput | ticket_statusWhereInput[]
    OR?: ticket_statusWhereInput[]
    NOT?: ticket_statusWhereInput | ticket_statusWhereInput[]
    id?: BigIntFilter<"ticket_status"> | bigint | number
    status?: StringFilter<"ticket_status"> | string
    tickets?: TicketsListRelationFilter
  }

  export type ticket_statusOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    tickets?: ticketsOrderByRelationAggregateInput
  }

  export type ticket_statusWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ticket_statusWhereInput | ticket_statusWhereInput[]
    OR?: ticket_statusWhereInput[]
    NOT?: ticket_statusWhereInput | ticket_statusWhereInput[]
    status?: StringFilter<"ticket_status"> | string
    tickets?: TicketsListRelationFilter
  }, "id">

  export type ticket_statusOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    _count?: ticket_statusCountOrderByAggregateInput
    _avg?: ticket_statusAvgOrderByAggregateInput
    _max?: ticket_statusMaxOrderByAggregateInput
    _min?: ticket_statusMinOrderByAggregateInput
    _sum?: ticket_statusSumOrderByAggregateInput
  }

  export type ticket_statusScalarWhereWithAggregatesInput = {
    AND?: ticket_statusScalarWhereWithAggregatesInput | ticket_statusScalarWhereWithAggregatesInput[]
    OR?: ticket_statusScalarWhereWithAggregatesInput[]
    NOT?: ticket_statusScalarWhereWithAggregatesInput | ticket_statusScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ticket_status"> | bigint | number
    status?: StringWithAggregatesFilter<"ticket_status"> | string
  }

  export type ticketsWhereInput = {
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    id?: BigIntFilter<"tickets"> | bigint | number
    title?: StringFilter<"tickets"> | string
    description?: StringFilter<"tickets"> | string
    status?: BigIntFilter<"tickets"> | bigint | number
    priority?: BigIntFilter<"tickets"> | bigint | number
    customer_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    assignee_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    message?: MessageListRelationFilter
    profiles_tickets_assignee_idToprofiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    profiles_tickets_customer_idToprofiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    priority_tickets_priorityTopriority?: XOR<PriorityScalarRelationFilter, priorityWhereInput>
    ticket_status?: XOR<Ticket_statusScalarRelationFilter, ticket_statusWhereInput>
  }

  export type ticketsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrderInput | SortOrder
    assignee_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    message?: messageOrderByRelationAggregateInput
    profiles_tickets_assignee_idToprofiles?: profilesOrderByWithRelationInput
    profiles_tickets_customer_idToprofiles?: profilesOrderByWithRelationInput
    priority_tickets_priorityTopriority?: priorityOrderByWithRelationInput
    ticket_status?: ticket_statusOrderByWithRelationInput
  }

  export type ticketsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    title?: StringFilter<"tickets"> | string
    description?: StringFilter<"tickets"> | string
    status?: BigIntFilter<"tickets"> | bigint | number
    priority?: BigIntFilter<"tickets"> | bigint | number
    customer_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    assignee_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
    message?: MessageListRelationFilter
    profiles_tickets_assignee_idToprofiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    profiles_tickets_customer_idToprofiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    priority_tickets_priorityTopriority?: XOR<PriorityScalarRelationFilter, priorityWhereInput>
    ticket_status?: XOR<Ticket_statusScalarRelationFilter, ticket_statusWhereInput>
  }, "id">

  export type ticketsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrderInput | SortOrder
    assignee_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ticketsCountOrderByAggregateInput
    _avg?: ticketsAvgOrderByAggregateInput
    _max?: ticketsMaxOrderByAggregateInput
    _min?: ticketsMinOrderByAggregateInput
    _sum?: ticketsSumOrderByAggregateInput
  }

  export type ticketsScalarWhereWithAggregatesInput = {
    AND?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    OR?: ticketsScalarWhereWithAggregatesInput[]
    NOT?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"tickets"> | bigint | number
    title?: StringWithAggregatesFilter<"tickets"> | string
    description?: StringWithAggregatesFilter<"tickets"> | string
    status?: BigIntWithAggregatesFilter<"tickets"> | bigint | number
    priority?: BigIntWithAggregatesFilter<"tickets"> | bigint | number
    customer_id?: BigIntNullableWithAggregatesFilter<"tickets"> | bigint | number | null
    assignee_id?: BigIntNullableWithAggregatesFilter<"tickets"> | bigint | number | null
    created_at?: DateTimeWithAggregatesFilter<"tickets"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"tickets"> | Date | string | null
  }

  export type messageWhereInput = {
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    id?: BigIntFilter<"message"> | bigint | number
    content?: StringFilter<"message"> | string
    ticket_id?: BigIntNullableFilter<"message"> | bigint | number | null
    sender_id?: BigIntNullableFilter<"message"> | bigint | number | null
    created_at?: DateTimeFilter<"message"> | Date | string
    profiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    tickets?: XOR<TicketsNullableScalarRelationFilter, ticketsWhereInput> | null
  }

  export type messageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    ticket_id?: SortOrderInput | SortOrder
    sender_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    profiles?: profilesOrderByWithRelationInput
    tickets?: ticketsOrderByWithRelationInput
  }

  export type messageWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    content?: StringFilter<"message"> | string
    ticket_id?: BigIntNullableFilter<"message"> | bigint | number | null
    sender_id?: BigIntNullableFilter<"message"> | bigint | number | null
    created_at?: DateTimeFilter<"message"> | Date | string
    profiles?: XOR<ProfilesNullableScalarRelationFilter, profilesWhereInput> | null
    tickets?: XOR<TicketsNullableScalarRelationFilter, ticketsWhereInput> | null
  }, "id">

  export type messageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    ticket_id?: SortOrderInput | SortOrder
    sender_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _avg?: messageAvgOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
    _sum?: messageSumOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    OR?: messageScalarWhereWithAggregatesInput[]
    NOT?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"message"> | bigint | number
    content?: StringWithAggregatesFilter<"message"> | string
    ticket_id?: BigIntNullableWithAggregatesFilter<"message"> | bigint | number | null
    sender_id?: BigIntNullableWithAggregatesFilter<"message"> | bigint | number | null
    created_at?: DateTimeWithAggregatesFilter<"message"> | Date | string
  }

  export type priorityCreateInput = {
    id?: bigint | number
    priority: string
    tickets_tickets_priorityTopriority?: ticketsCreateNestedManyWithoutPriority_tickets_priorityTopriorityInput
  }

  export type priorityUncheckedCreateInput = {
    id?: bigint | number
    priority: string
    tickets_tickets_priorityTopriority?: ticketsUncheckedCreateNestedManyWithoutPriority_tickets_priorityTopriorityInput
  }

  export type priorityUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
    tickets_tickets_priorityTopriority?: ticketsUpdateManyWithoutPriority_tickets_priorityTopriorityNestedInput
  }

  export type priorityUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
    tickets_tickets_priorityTopriority?: ticketsUncheckedUpdateManyWithoutPriority_tickets_priorityTopriorityNestedInput
  }

  export type priorityCreateManyInput = {
    id?: bigint | number
    priority: string
  }

  export type priorityUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
  }

  export type priorityUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
  }

  export type profilesCreateInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    message?: messageCreateNestedManyWithoutProfilesInput
    roles?: rolesCreateNestedOneWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesUncheckedCreateInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    role?: number
    message?: messageUncheckedCreateNestedManyWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutProfilesNestedInput
    roles?: rolesUpdateOneRequiredWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    message?: messageUncheckedUpdateManyWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesCreateManyInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    role?: number
  }

  export type profilesUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profilesUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
  }

  export type rolesCreateInput = {
    role?: string | null
    profiles?: profilesCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateInput = {
    id?: number
    role?: string | null
    profiles?: profilesUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesUpdateInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    profiles?: profilesUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    profiles?: profilesUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesCreateManyInput = {
    id?: number
    role?: string | null
  }

  export type rolesUpdateManyMutationInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticket_statusCreateInput = {
    id?: bigint | number
    status: string
    tickets?: ticketsCreateNestedManyWithoutTicket_statusInput
  }

  export type ticket_statusUncheckedCreateInput = {
    id?: bigint | number
    status: string
    tickets?: ticketsUncheckedCreateNestedManyWithoutTicket_statusInput
  }

  export type ticket_statusUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
    tickets?: ticketsUpdateManyWithoutTicket_statusNestedInput
  }

  export type ticket_statusUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
    tickets?: ticketsUncheckedUpdateManyWithoutTicket_statusNestedInput
  }

  export type ticket_statusCreateManyInput = {
    id?: bigint | number
    status: string
  }

  export type ticket_statusUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ticket_statusUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ticketsCreateInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageCreateNestedManyWithoutTicketsInput
    profiles_tickets_assignee_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput
    profiles_tickets_customer_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput
    priority_tickets_priorityTopriority?: priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput
    ticket_status?: ticket_statusCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUpdateManyWithoutTicketsNestedInput
    profiles_tickets_assignee_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput
    profiles_tickets_customer_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput
    priority_tickets_priorityTopriority?: priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput
    ticket_status?: ticket_statusUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsCreateManyInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ticketsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messageCreateInput = {
    id?: bigint | number
    content: string
    created_at?: Date | string
    profiles?: profilesCreateNestedOneWithoutMessageInput
    tickets?: ticketsCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateInput = {
    id?: bigint | number
    content: string
    ticket_id?: bigint | number | null
    sender_id?: bigint | number | null
    created_at?: Date | string
  }

  export type messageUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: profilesUpdateOneWithoutMessageNestedInput
    tickets?: ticketsUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    ticket_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    sender_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageCreateManyInput = {
    id?: bigint | number
    content: string
    ticket_id?: bigint | number | null
    sender_id?: bigint | number | null
    created_at?: Date | string
  }

  export type messageUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    ticket_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    sender_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TicketsListRelationFilter = {
    every?: ticketsWhereInput
    some?: ticketsWhereInput
    none?: ticketsWhereInput
  }

  export type ticketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type priorityCountOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type priorityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type priorityMaxOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type priorityMinOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type prioritySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type RolesScalarRelationFilter = {
    is?: rolesWhereInput
    isNot?: rolesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type profilesCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type profilesAvgOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type profilesMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type profilesMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type profilesSumOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProfilesListRelationFilter = {
    every?: profilesWhereInput
    some?: profilesWhereInput
    none?: profilesWhereInput
  }

  export type profilesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolesCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ticket_statusCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ticket_statusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ticket_statusMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ticket_statusMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ticket_statusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProfilesNullableScalarRelationFilter = {
    is?: profilesWhereInput | null
    isNot?: profilesWhereInput | null
  }

  export type PriorityScalarRelationFilter = {
    is?: priorityWhereInput
    isNot?: priorityWhereInput
  }

  export type Ticket_statusScalarRelationFilter = {
    is?: ticket_statusWhereInput
    isNot?: ticket_statusWhereInput
  }

  export type ticketsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrder
    assignee_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsAvgOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrder
    assignee_id?: SortOrder
  }

  export type ticketsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrder
    assignee_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrder
    assignee_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsSumOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    customer_id?: SortOrder
    assignee_id?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TicketsNullableScalarRelationFilter = {
    is?: ticketsWhereInput | null
    isNot?: ticketsWhereInput | null
  }

  export type messageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    ticket_id?: SortOrder
    sender_id?: SortOrder
    created_at?: SortOrder
  }

  export type messageAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    sender_id?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    ticket_id?: SortOrder
    sender_id?: SortOrder
    created_at?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    ticket_id?: SortOrder
    sender_id?: SortOrder
    created_at?: SortOrder
  }

  export type messageSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    sender_id?: SortOrder
  }

  export type ticketsCreateNestedManyWithoutPriority_tickets_priorityTopriorityInput = {
    create?: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput> | ticketsCreateWithoutPriority_tickets_priorityTopriorityInput[] | ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput | ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput[]
    createMany?: ticketsCreateManyPriority_tickets_priorityTopriorityInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutPriority_tickets_priorityTopriorityInput = {
    create?: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput> | ticketsCreateWithoutPriority_tickets_priorityTopriorityInput[] | ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput | ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput[]
    createMany?: ticketsCreateManyPriority_tickets_priorityTopriorityInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ticketsUpdateManyWithoutPriority_tickets_priorityTopriorityNestedInput = {
    create?: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput> | ticketsCreateWithoutPriority_tickets_priorityTopriorityInput[] | ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput | ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput | ticketsUpsertWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput[]
    createMany?: ticketsCreateManyPriority_tickets_priorityTopriorityInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput | ticketsUpdateWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutPriority_tickets_priorityTopriorityInput | ticketsUpdateManyWithWhereWithoutPriority_tickets_priorityTopriorityInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutPriority_tickets_priorityTopriorityNestedInput = {
    create?: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput> | ticketsCreateWithoutPriority_tickets_priorityTopriorityInput[] | ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput | ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput | ticketsUpsertWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput[]
    createMany?: ticketsCreateManyPriority_tickets_priorityTopriorityInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput | ticketsUpdateWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutPriority_tickets_priorityTopriorityInput | ticketsUpdateManyWithWhereWithoutPriority_tickets_priorityTopriorityInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type messageCreateNestedManyWithoutProfilesInput = {
    create?: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput> | messageCreateWithoutProfilesInput[] | messageUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: messageCreateOrConnectWithoutProfilesInput | messageCreateOrConnectWithoutProfilesInput[]
    createMany?: messageCreateManyProfilesInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type rolesCreateNestedOneWithoutProfilesInput = {
    create?: XOR<rolesCreateWithoutProfilesInput, rolesUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutProfilesInput
    connect?: rolesWhereUniqueInput
  }

  export type ticketsCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_assignee_idToprofilesInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_customer_idToprofilesInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutProfilesInput = {
    create?: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput> | messageCreateWithoutProfilesInput[] | messageUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: messageCreateOrConnectWithoutProfilesInput | messageCreateOrConnectWithoutProfilesInput[]
    createMany?: messageCreateManyProfilesInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_assignee_idToprofilesInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_customer_idToprofilesInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type messageUpdateManyWithoutProfilesNestedInput = {
    create?: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput> | messageCreateWithoutProfilesInput[] | messageUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: messageCreateOrConnectWithoutProfilesInput | messageCreateOrConnectWithoutProfilesInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutProfilesInput | messageUpsertWithWhereUniqueWithoutProfilesInput[]
    createMany?: messageCreateManyProfilesInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutProfilesInput | messageUpdateWithWhereUniqueWithoutProfilesInput[]
    updateMany?: messageUpdateManyWithWhereWithoutProfilesInput | messageUpdateManyWithWhereWithoutProfilesInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type rolesUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<rolesCreateWithoutProfilesInput, rolesUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutProfilesInput
    upsert?: rolesUpsertWithoutProfilesInput
    connect?: rolesWhereUniqueInput
    update?: XOR<XOR<rolesUpdateToOneWithWhereWithoutProfilesInput, rolesUpdateWithoutProfilesInput>, rolesUncheckedUpdateWithoutProfilesInput>
  }

  export type ticketsUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_assignee_idToprofilesInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpdateManyWithWhereWithoutProfiles_tickets_assignee_idToprofilesInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_customer_idToprofilesInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpdateManyWithWhereWithoutProfiles_tickets_customer_idToprofilesInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type messageUncheckedUpdateManyWithoutProfilesNestedInput = {
    create?: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput> | messageCreateWithoutProfilesInput[] | messageUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: messageCreateOrConnectWithoutProfilesInput | messageCreateOrConnectWithoutProfilesInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutProfilesInput | messageUpsertWithWhereUniqueWithoutProfilesInput[]
    createMany?: messageCreateManyProfilesInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutProfilesInput | messageUpdateWithWhereUniqueWithoutProfilesInput[]
    updateMany?: messageUpdateManyWithWhereWithoutProfilesInput | messageUpdateManyWithWhereWithoutProfilesInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_assignee_idToprofilesInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProfiles_tickets_assignee_idToprofilesInput | ticketsUpdateManyWithWhereWithoutProfiles_tickets_assignee_idToprofilesInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput = {
    create?: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput> | ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput[] | ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput | ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput[]
    createMany?: ticketsCreateManyProfiles_tickets_customer_idToprofilesInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutProfiles_tickets_customer_idToprofilesInput | ticketsUpdateManyWithWhereWithoutProfiles_tickets_customer_idToprofilesInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type profilesCreateNestedManyWithoutRolesInput = {
    create?: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput> | profilesCreateWithoutRolesInput[] | profilesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: profilesCreateOrConnectWithoutRolesInput | profilesCreateOrConnectWithoutRolesInput[]
    createMany?: profilesCreateManyRolesInputEnvelope
    connect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
  }

  export type profilesUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput> | profilesCreateWithoutRolesInput[] | profilesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: profilesCreateOrConnectWithoutRolesInput | profilesCreateOrConnectWithoutRolesInput[]
    createMany?: profilesCreateManyRolesInputEnvelope
    connect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
  }

  export type profilesUpdateManyWithoutRolesNestedInput = {
    create?: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput> | profilesCreateWithoutRolesInput[] | profilesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: profilesCreateOrConnectWithoutRolesInput | profilesCreateOrConnectWithoutRolesInput[]
    upsert?: profilesUpsertWithWhereUniqueWithoutRolesInput | profilesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: profilesCreateManyRolesInputEnvelope
    set?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    disconnect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    delete?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    connect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    update?: profilesUpdateWithWhereUniqueWithoutRolesInput | profilesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: profilesUpdateManyWithWhereWithoutRolesInput | profilesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: profilesScalarWhereInput | profilesScalarWhereInput[]
  }

  export type profilesUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput> | profilesCreateWithoutRolesInput[] | profilesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: profilesCreateOrConnectWithoutRolesInput | profilesCreateOrConnectWithoutRolesInput[]
    upsert?: profilesUpsertWithWhereUniqueWithoutRolesInput | profilesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: profilesCreateManyRolesInputEnvelope
    set?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    disconnect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    delete?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    connect?: profilesWhereUniqueInput | profilesWhereUniqueInput[]
    update?: profilesUpdateWithWhereUniqueWithoutRolesInput | profilesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: profilesUpdateManyWithWhereWithoutRolesInput | profilesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: profilesScalarWhereInput | profilesScalarWhereInput[]
  }

  export type ticketsCreateNestedManyWithoutTicket_statusInput = {
    create?: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput> | ticketsCreateWithoutTicket_statusInput[] | ticketsUncheckedCreateWithoutTicket_statusInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_statusInput | ticketsCreateOrConnectWithoutTicket_statusInput[]
    createMany?: ticketsCreateManyTicket_statusInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutTicket_statusInput = {
    create?: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput> | ticketsCreateWithoutTicket_statusInput[] | ticketsUncheckedCreateWithoutTicket_statusInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_statusInput | ticketsCreateOrConnectWithoutTicket_statusInput[]
    createMany?: ticketsCreateManyTicket_statusInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type ticketsUpdateManyWithoutTicket_statusNestedInput = {
    create?: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput> | ticketsCreateWithoutTicket_statusInput[] | ticketsUncheckedCreateWithoutTicket_statusInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_statusInput | ticketsCreateOrConnectWithoutTicket_statusInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutTicket_statusInput | ticketsUpsertWithWhereUniqueWithoutTicket_statusInput[]
    createMany?: ticketsCreateManyTicket_statusInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutTicket_statusInput | ticketsUpdateWithWhereUniqueWithoutTicket_statusInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutTicket_statusInput | ticketsUpdateManyWithWhereWithoutTicket_statusInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutTicket_statusNestedInput = {
    create?: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput> | ticketsCreateWithoutTicket_statusInput[] | ticketsUncheckedCreateWithoutTicket_statusInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutTicket_statusInput | ticketsCreateOrConnectWithoutTicket_statusInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutTicket_statusInput | ticketsUpsertWithWhereUniqueWithoutTicket_statusInput[]
    createMany?: ticketsCreateManyTicket_statusInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutTicket_statusInput | ticketsUpdateWithWhereUniqueWithoutTicket_statusInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutTicket_statusInput | ticketsUpdateManyWithWhereWithoutTicket_statusInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type messageCreateNestedManyWithoutTicketsInput = {
    create?: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput> | messageCreateWithoutTicketsInput[] | messageUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: messageCreateOrConnectWithoutTicketsInput | messageCreateOrConnectWithoutTicketsInput[]
    createMany?: messageCreateManyTicketsInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput = {
    create?: XOR<profilesCreateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_assignee_idToprofilesInput>
    connectOrCreate?: profilesCreateOrConnectWithoutTickets_tickets_assignee_idToprofilesInput
    connect?: profilesWhereUniqueInput
  }

  export type profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput = {
    create?: XOR<profilesCreateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_customer_idToprofilesInput>
    connectOrCreate?: profilesCreateOrConnectWithoutTickets_tickets_customer_idToprofilesInput
    connect?: profilesWhereUniqueInput
  }

  export type priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput = {
    create?: XOR<priorityCreateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedCreateWithoutTickets_tickets_priorityTopriorityInput>
    connectOrCreate?: priorityCreateOrConnectWithoutTickets_tickets_priorityTopriorityInput
    connect?: priorityWhereUniqueInput
  }

  export type ticket_statusCreateNestedOneWithoutTicketsInput = {
    create?: XOR<ticket_statusCreateWithoutTicketsInput, ticket_statusUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: ticket_statusCreateOrConnectWithoutTicketsInput
    connect?: ticket_statusWhereUniqueInput
  }

  export type messageUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput> | messageCreateWithoutTicketsInput[] | messageUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: messageCreateOrConnectWithoutTicketsInput | messageCreateOrConnectWithoutTicketsInput[]
    createMany?: messageCreateManyTicketsInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type messageUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput> | messageCreateWithoutTicketsInput[] | messageUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: messageCreateOrConnectWithoutTicketsInput | messageCreateOrConnectWithoutTicketsInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutTicketsInput | messageUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: messageCreateManyTicketsInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutTicketsInput | messageUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: messageUpdateManyWithWhereWithoutTicketsInput | messageUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput = {
    create?: XOR<profilesCreateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_assignee_idToprofilesInput>
    connectOrCreate?: profilesCreateOrConnectWithoutTickets_tickets_assignee_idToprofilesInput
    upsert?: profilesUpsertWithoutTickets_tickets_assignee_idToprofilesInput
    disconnect?: profilesWhereInput | boolean
    delete?: profilesWhereInput | boolean
    connect?: profilesWhereUniqueInput
    update?: XOR<XOR<profilesUpdateToOneWithWhereWithoutTickets_tickets_assignee_idToprofilesInput, profilesUpdateWithoutTickets_tickets_assignee_idToprofilesInput>, profilesUncheckedUpdateWithoutTickets_tickets_assignee_idToprofilesInput>
  }

  export type profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput = {
    create?: XOR<profilesCreateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_customer_idToprofilesInput>
    connectOrCreate?: profilesCreateOrConnectWithoutTickets_tickets_customer_idToprofilesInput
    upsert?: profilesUpsertWithoutTickets_tickets_customer_idToprofilesInput
    disconnect?: profilesWhereInput | boolean
    delete?: profilesWhereInput | boolean
    connect?: profilesWhereUniqueInput
    update?: XOR<XOR<profilesUpdateToOneWithWhereWithoutTickets_tickets_customer_idToprofilesInput, profilesUpdateWithoutTickets_tickets_customer_idToprofilesInput>, profilesUncheckedUpdateWithoutTickets_tickets_customer_idToprofilesInput>
  }

  export type priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput = {
    create?: XOR<priorityCreateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedCreateWithoutTickets_tickets_priorityTopriorityInput>
    connectOrCreate?: priorityCreateOrConnectWithoutTickets_tickets_priorityTopriorityInput
    upsert?: priorityUpsertWithoutTickets_tickets_priorityTopriorityInput
    connect?: priorityWhereUniqueInput
    update?: XOR<XOR<priorityUpdateToOneWithWhereWithoutTickets_tickets_priorityTopriorityInput, priorityUpdateWithoutTickets_tickets_priorityTopriorityInput>, priorityUncheckedUpdateWithoutTickets_tickets_priorityTopriorityInput>
  }

  export type ticket_statusUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<ticket_statusCreateWithoutTicketsInput, ticket_statusUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: ticket_statusCreateOrConnectWithoutTicketsInput
    upsert?: ticket_statusUpsertWithoutTicketsInput
    connect?: ticket_statusWhereUniqueInput
    update?: XOR<XOR<ticket_statusUpdateToOneWithWhereWithoutTicketsInput, ticket_statusUpdateWithoutTicketsInput>, ticket_statusUncheckedUpdateWithoutTicketsInput>
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type messageUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput> | messageCreateWithoutTicketsInput[] | messageUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: messageCreateOrConnectWithoutTicketsInput | messageCreateOrConnectWithoutTicketsInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutTicketsInput | messageUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: messageCreateManyTicketsInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutTicketsInput | messageUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: messageUpdateManyWithWhereWithoutTicketsInput | messageUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type profilesCreateNestedOneWithoutMessageInput = {
    create?: XOR<profilesCreateWithoutMessageInput, profilesUncheckedCreateWithoutMessageInput>
    connectOrCreate?: profilesCreateOrConnectWithoutMessageInput
    connect?: profilesWhereUniqueInput
  }

  export type ticketsCreateNestedOneWithoutMessageInput = {
    create?: XOR<ticketsCreateWithoutMessageInput, ticketsUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutMessageInput
    connect?: ticketsWhereUniqueInput
  }

  export type profilesUpdateOneWithoutMessageNestedInput = {
    create?: XOR<profilesCreateWithoutMessageInput, profilesUncheckedCreateWithoutMessageInput>
    connectOrCreate?: profilesCreateOrConnectWithoutMessageInput
    upsert?: profilesUpsertWithoutMessageInput
    disconnect?: profilesWhereInput | boolean
    delete?: profilesWhereInput | boolean
    connect?: profilesWhereUniqueInput
    update?: XOR<XOR<profilesUpdateToOneWithWhereWithoutMessageInput, profilesUpdateWithoutMessageInput>, profilesUncheckedUpdateWithoutMessageInput>
  }

  export type ticketsUpdateOneWithoutMessageNestedInput = {
    create?: XOR<ticketsCreateWithoutMessageInput, ticketsUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutMessageInput
    upsert?: ticketsUpsertWithoutMessageInput
    disconnect?: ticketsWhereInput | boolean
    delete?: ticketsWhereInput | boolean
    connect?: ticketsWhereUniqueInput
    update?: XOR<XOR<ticketsUpdateToOneWithWhereWithoutMessageInput, ticketsUpdateWithoutMessageInput>, ticketsUncheckedUpdateWithoutMessageInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ticketsCreateWithoutPriority_tickets_priorityTopriorityInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageCreateNestedManyWithoutTicketsInput
    profiles_tickets_assignee_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput
    profiles_tickets_customer_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput
    ticket_status?: ticket_statusCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutPriority_tickets_priorityTopriorityInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput>
  }

  export type ticketsCreateManyPriority_tickets_priorityTopriorityInputEnvelope = {
    data: ticketsCreateManyPriority_tickets_priorityTopriorityInput | ticketsCreateManyPriority_tickets_priorityTopriorityInput[]
    skipDuplicates?: boolean
  }

  export type ticketsUpsertWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedUpdateWithoutPriority_tickets_priorityTopriorityInput>
    create: XOR<ticketsCreateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedCreateWithoutPriority_tickets_priorityTopriorityInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutPriority_tickets_priorityTopriorityInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutPriority_tickets_priorityTopriorityInput, ticketsUncheckedUpdateWithoutPriority_tickets_priorityTopriorityInput>
  }

  export type ticketsUpdateManyWithWhereWithoutPriority_tickets_priorityTopriorityInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutPriority_tickets_priorityTopriorityInput>
  }

  export type ticketsScalarWhereInput = {
    AND?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    OR?: ticketsScalarWhereInput[]
    NOT?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    id?: BigIntFilter<"tickets"> | bigint | number
    title?: StringFilter<"tickets"> | string
    description?: StringFilter<"tickets"> | string
    status?: BigIntFilter<"tickets"> | bigint | number
    priority?: BigIntFilter<"tickets"> | bigint | number
    customer_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    assignee_id?: BigIntNullableFilter<"tickets"> | bigint | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeNullableFilter<"tickets"> | Date | string | null
  }

  export type messageCreateWithoutProfilesInput = {
    id?: bigint | number
    content: string
    created_at?: Date | string
    tickets?: ticketsCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateWithoutProfilesInput = {
    id?: bigint | number
    content: string
    ticket_id?: bigint | number | null
    created_at?: Date | string
  }

  export type messageCreateOrConnectWithoutProfilesInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput>
  }

  export type messageCreateManyProfilesInputEnvelope = {
    data: messageCreateManyProfilesInput | messageCreateManyProfilesInput[]
    skipDuplicates?: boolean
  }

  export type rolesCreateWithoutProfilesInput = {
    role?: string | null
  }

  export type rolesUncheckedCreateWithoutProfilesInput = {
    id?: number
    role?: string | null
  }

  export type rolesCreateOrConnectWithoutProfilesInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutProfilesInput, rolesUncheckedCreateWithoutProfilesInput>
  }

  export type ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageCreateNestedManyWithoutTicketsInput
    profiles_tickets_customer_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput
    priority_tickets_priorityTopriority?: priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput
    ticket_status?: ticket_statusCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    customer_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutProfiles_tickets_assignee_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput>
  }

  export type ticketsCreateManyProfiles_tickets_assignee_idToprofilesInputEnvelope = {
    data: ticketsCreateManyProfiles_tickets_assignee_idToprofilesInput | ticketsCreateManyProfiles_tickets_assignee_idToprofilesInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageCreateNestedManyWithoutTicketsInput
    profiles_tickets_assignee_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput
    priority_tickets_priorityTopriority?: priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput
    ticket_status?: ticket_statusCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutProfiles_tickets_customer_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput>
  }

  export type ticketsCreateManyProfiles_tickets_customer_idToprofilesInputEnvelope = {
    data: ticketsCreateManyProfiles_tickets_customer_idToprofilesInput | ticketsCreateManyProfiles_tickets_customer_idToprofilesInput[]
    skipDuplicates?: boolean
  }

  export type messageUpsertWithWhereUniqueWithoutProfilesInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutProfilesInput, messageUncheckedUpdateWithoutProfilesInput>
    create: XOR<messageCreateWithoutProfilesInput, messageUncheckedCreateWithoutProfilesInput>
  }

  export type messageUpdateWithWhereUniqueWithoutProfilesInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutProfilesInput, messageUncheckedUpdateWithoutProfilesInput>
  }

  export type messageUpdateManyWithWhereWithoutProfilesInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutProfilesInput>
  }

  export type messageScalarWhereInput = {
    AND?: messageScalarWhereInput | messageScalarWhereInput[]
    OR?: messageScalarWhereInput[]
    NOT?: messageScalarWhereInput | messageScalarWhereInput[]
    id?: BigIntFilter<"message"> | bigint | number
    content?: StringFilter<"message"> | string
    ticket_id?: BigIntNullableFilter<"message"> | bigint | number | null
    sender_id?: BigIntNullableFilter<"message"> | bigint | number | null
    created_at?: DateTimeFilter<"message"> | Date | string
  }

  export type rolesUpsertWithoutProfilesInput = {
    update: XOR<rolesUpdateWithoutProfilesInput, rolesUncheckedUpdateWithoutProfilesInput>
    create: XOR<rolesCreateWithoutProfilesInput, rolesUncheckedCreateWithoutProfilesInput>
    where?: rolesWhereInput
  }

  export type rolesUpdateToOneWithWhereWithoutProfilesInput = {
    where?: rolesWhereInput
    data: XOR<rolesUpdateWithoutProfilesInput, rolesUncheckedUpdateWithoutProfilesInput>
  }

  export type rolesUpdateWithoutProfilesInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rolesUncheckedUpdateWithoutProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedUpdateWithoutProfiles_tickets_assignee_idToprofilesInput>
    create: XOR<ticketsCreateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_assignee_idToprofilesInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_assignee_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutProfiles_tickets_assignee_idToprofilesInput, ticketsUncheckedUpdateWithoutProfiles_tickets_assignee_idToprofilesInput>
  }

  export type ticketsUpdateManyWithWhereWithoutProfiles_tickets_assignee_idToprofilesInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesInput>
  }

  export type ticketsUpsertWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedUpdateWithoutProfiles_tickets_customer_idToprofilesInput>
    create: XOR<ticketsCreateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedCreateWithoutProfiles_tickets_customer_idToprofilesInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutProfiles_tickets_customer_idToprofilesInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutProfiles_tickets_customer_idToprofilesInput, ticketsUncheckedUpdateWithoutProfiles_tickets_customer_idToprofilesInput>
  }

  export type ticketsUpdateManyWithWhereWithoutProfiles_tickets_customer_idToprofilesInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesInput>
  }

  export type profilesCreateWithoutRolesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    message?: messageCreateNestedManyWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesUncheckedCreateWithoutRolesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    message?: messageUncheckedCreateNestedManyWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesCreateOrConnectWithoutRolesInput = {
    where: profilesWhereUniqueInput
    create: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput>
  }

  export type profilesCreateManyRolesInputEnvelope = {
    data: profilesCreateManyRolesInput | profilesCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type profilesUpsertWithWhereUniqueWithoutRolesInput = {
    where: profilesWhereUniqueInput
    update: XOR<profilesUpdateWithoutRolesInput, profilesUncheckedUpdateWithoutRolesInput>
    create: XOR<profilesCreateWithoutRolesInput, profilesUncheckedCreateWithoutRolesInput>
  }

  export type profilesUpdateWithWhereUniqueWithoutRolesInput = {
    where: profilesWhereUniqueInput
    data: XOR<profilesUpdateWithoutRolesInput, profilesUncheckedUpdateWithoutRolesInput>
  }

  export type profilesUpdateManyWithWhereWithoutRolesInput = {
    where: profilesScalarWhereInput
    data: XOR<profilesUpdateManyMutationInput, profilesUncheckedUpdateManyWithoutRolesInput>
  }

  export type profilesScalarWhereInput = {
    AND?: profilesScalarWhereInput | profilesScalarWhereInput[]
    OR?: profilesScalarWhereInput[]
    NOT?: profilesScalarWhereInput | profilesScalarWhereInput[]
    id?: BigIntFilter<"profiles"> | bigint | number
    created_at?: DateTimeFilter<"profiles"> | Date | string
    email?: StringFilter<"profiles"> | string
    name?: StringNullableFilter<"profiles"> | string | null
    role?: IntFilter<"profiles"> | number
  }

  export type ticketsCreateWithoutTicket_statusInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageCreateNestedManyWithoutTicketsInput
    profiles_tickets_assignee_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput
    profiles_tickets_customer_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput
    priority_tickets_priorityTopriority?: priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput
  }

  export type ticketsUncheckedCreateWithoutTicket_statusInput = {
    id?: bigint | number
    title: string
    description: string
    priority?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    message?: messageUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutTicket_statusInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput>
  }

  export type ticketsCreateManyTicket_statusInputEnvelope = {
    data: ticketsCreateManyTicket_statusInput | ticketsCreateManyTicket_statusInput[]
    skipDuplicates?: boolean
  }

  export type ticketsUpsertWithWhereUniqueWithoutTicket_statusInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutTicket_statusInput, ticketsUncheckedUpdateWithoutTicket_statusInput>
    create: XOR<ticketsCreateWithoutTicket_statusInput, ticketsUncheckedCreateWithoutTicket_statusInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutTicket_statusInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutTicket_statusInput, ticketsUncheckedUpdateWithoutTicket_statusInput>
  }

  export type ticketsUpdateManyWithWhereWithoutTicket_statusInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutTicket_statusInput>
  }

  export type messageCreateWithoutTicketsInput = {
    id?: bigint | number
    content: string
    created_at?: Date | string
    profiles?: profilesCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateWithoutTicketsInput = {
    id?: bigint | number
    content: string
    sender_id?: bigint | number | null
    created_at?: Date | string
  }

  export type messageCreateOrConnectWithoutTicketsInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput>
  }

  export type messageCreateManyTicketsInputEnvelope = {
    data: messageCreateManyTicketsInput | messageCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type profilesCreateWithoutTickets_tickets_assignee_idToprofilesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    message?: messageCreateNestedManyWithoutProfilesInput
    roles?: rolesCreateNestedOneWithoutProfilesInput
    tickets_tickets_customer_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesUncheckedCreateWithoutTickets_tickets_assignee_idToprofilesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    role?: number
    message?: messageUncheckedCreateNestedManyWithoutProfilesInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesCreateOrConnectWithoutTickets_tickets_assignee_idToprofilesInput = {
    where: profilesWhereUniqueInput
    create: XOR<profilesCreateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_assignee_idToprofilesInput>
  }

  export type profilesCreateWithoutTickets_tickets_customer_idToprofilesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    message?: messageCreateNestedManyWithoutProfilesInput
    roles?: rolesCreateNestedOneWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
  }

  export type profilesUncheckedCreateWithoutTickets_tickets_customer_idToprofilesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    role?: number
    message?: messageUncheckedCreateNestedManyWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
  }

  export type profilesCreateOrConnectWithoutTickets_tickets_customer_idToprofilesInput = {
    where: profilesWhereUniqueInput
    create: XOR<profilesCreateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_customer_idToprofilesInput>
  }

  export type priorityCreateWithoutTickets_tickets_priorityTopriorityInput = {
    id?: bigint | number
    priority: string
  }

  export type priorityUncheckedCreateWithoutTickets_tickets_priorityTopriorityInput = {
    id?: bigint | number
    priority: string
  }

  export type priorityCreateOrConnectWithoutTickets_tickets_priorityTopriorityInput = {
    where: priorityWhereUniqueInput
    create: XOR<priorityCreateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedCreateWithoutTickets_tickets_priorityTopriorityInput>
  }

  export type ticket_statusCreateWithoutTicketsInput = {
    id?: bigint | number
    status: string
  }

  export type ticket_statusUncheckedCreateWithoutTicketsInput = {
    id?: bigint | number
    status: string
  }

  export type ticket_statusCreateOrConnectWithoutTicketsInput = {
    where: ticket_statusWhereUniqueInput
    create: XOR<ticket_statusCreateWithoutTicketsInput, ticket_statusUncheckedCreateWithoutTicketsInput>
  }

  export type messageUpsertWithWhereUniqueWithoutTicketsInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutTicketsInput, messageUncheckedUpdateWithoutTicketsInput>
    create: XOR<messageCreateWithoutTicketsInput, messageUncheckedCreateWithoutTicketsInput>
  }

  export type messageUpdateWithWhereUniqueWithoutTicketsInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutTicketsInput, messageUncheckedUpdateWithoutTicketsInput>
  }

  export type messageUpdateManyWithWhereWithoutTicketsInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutTicketsInput>
  }

  export type profilesUpsertWithoutTickets_tickets_assignee_idToprofilesInput = {
    update: XOR<profilesUpdateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedUpdateWithoutTickets_tickets_assignee_idToprofilesInput>
    create: XOR<profilesCreateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_assignee_idToprofilesInput>
    where?: profilesWhereInput
  }

  export type profilesUpdateToOneWithWhereWithoutTickets_tickets_assignee_idToprofilesInput = {
    where?: profilesWhereInput
    data: XOR<profilesUpdateWithoutTickets_tickets_assignee_idToprofilesInput, profilesUncheckedUpdateWithoutTickets_tickets_assignee_idToprofilesInput>
  }

  export type profilesUpdateWithoutTickets_tickets_assignee_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutProfilesNestedInput
    roles?: rolesUpdateOneRequiredWithoutProfilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateWithoutTickets_tickets_assignee_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    message?: messageUncheckedUpdateManyWithoutProfilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUpsertWithoutTickets_tickets_customer_idToprofilesInput = {
    update: XOR<profilesUpdateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedUpdateWithoutTickets_tickets_customer_idToprofilesInput>
    create: XOR<profilesCreateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedCreateWithoutTickets_tickets_customer_idToprofilesInput>
    where?: profilesWhereInput
  }

  export type profilesUpdateToOneWithWhereWithoutTickets_tickets_customer_idToprofilesInput = {
    where?: profilesWhereInput
    data: XOR<profilesUpdateWithoutTickets_tickets_customer_idToprofilesInput, profilesUncheckedUpdateWithoutTickets_tickets_customer_idToprofilesInput>
  }

  export type profilesUpdateWithoutTickets_tickets_customer_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutProfilesNestedInput
    roles?: rolesUpdateOneRequiredWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateWithoutTickets_tickets_customer_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    message?: messageUncheckedUpdateManyWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
  }

  export type priorityUpsertWithoutTickets_tickets_priorityTopriorityInput = {
    update: XOR<priorityUpdateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedUpdateWithoutTickets_tickets_priorityTopriorityInput>
    create: XOR<priorityCreateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedCreateWithoutTickets_tickets_priorityTopriorityInput>
    where?: priorityWhereInput
  }

  export type priorityUpdateToOneWithWhereWithoutTickets_tickets_priorityTopriorityInput = {
    where?: priorityWhereInput
    data: XOR<priorityUpdateWithoutTickets_tickets_priorityTopriorityInput, priorityUncheckedUpdateWithoutTickets_tickets_priorityTopriorityInput>
  }

  export type priorityUpdateWithoutTickets_tickets_priorityTopriorityInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
  }

  export type priorityUncheckedUpdateWithoutTickets_tickets_priorityTopriorityInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: StringFieldUpdateOperationsInput | string
  }

  export type ticket_statusUpsertWithoutTicketsInput = {
    update: XOR<ticket_statusUpdateWithoutTicketsInput, ticket_statusUncheckedUpdateWithoutTicketsInput>
    create: XOR<ticket_statusCreateWithoutTicketsInput, ticket_statusUncheckedCreateWithoutTicketsInput>
    where?: ticket_statusWhereInput
  }

  export type ticket_statusUpdateToOneWithWhereWithoutTicketsInput = {
    where?: ticket_statusWhereInput
    data: XOR<ticket_statusUpdateWithoutTicketsInput, ticket_statusUncheckedUpdateWithoutTicketsInput>
  }

  export type ticket_statusUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ticket_statusUncheckedUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type profilesCreateWithoutMessageInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    roles?: rolesCreateNestedOneWithoutProfilesInput
    tickets_tickets_assignee_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesUncheckedCreateWithoutMessageInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
    role?: number
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_assignee_idToprofilesInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedCreateNestedManyWithoutProfiles_tickets_customer_idToprofilesInput
  }

  export type profilesCreateOrConnectWithoutMessageInput = {
    where: profilesWhereUniqueInput
    create: XOR<profilesCreateWithoutMessageInput, profilesUncheckedCreateWithoutMessageInput>
  }

  export type ticketsCreateWithoutMessageInput = {
    id?: bigint | number
    title: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    profiles_tickets_assignee_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_assignee_idToprofilesInput
    profiles_tickets_customer_idToprofiles?: profilesCreateNestedOneWithoutTickets_tickets_customer_idToprofilesInput
    priority_tickets_priorityTopriority?: priorityCreateNestedOneWithoutTickets_tickets_priorityTopriorityInput
    ticket_status?: ticket_statusCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutMessageInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ticketsCreateOrConnectWithoutMessageInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutMessageInput, ticketsUncheckedCreateWithoutMessageInput>
  }

  export type profilesUpsertWithoutMessageInput = {
    update: XOR<profilesUpdateWithoutMessageInput, profilesUncheckedUpdateWithoutMessageInput>
    create: XOR<profilesCreateWithoutMessageInput, profilesUncheckedCreateWithoutMessageInput>
    where?: profilesWhereInput
  }

  export type profilesUpdateToOneWithWhereWithoutMessageInput = {
    where?: profilesWhereInput
    data: XOR<profilesUpdateWithoutMessageInput, profilesUncheckedUpdateWithoutMessageInput>
  }

  export type profilesUpdateWithoutMessageInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: rolesUpdateOneRequiredWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateWithoutMessageInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type ticketsUpsertWithoutMessageInput = {
    update: XOR<ticketsUpdateWithoutMessageInput, ticketsUncheckedUpdateWithoutMessageInput>
    create: XOR<ticketsCreateWithoutMessageInput, ticketsUncheckedCreateWithoutMessageInput>
    where?: ticketsWhereInput
  }

  export type ticketsUpdateToOneWithWhereWithoutMessageInput = {
    where?: ticketsWhereInput
    data: XOR<ticketsUpdateWithoutMessageInput, ticketsUncheckedUpdateWithoutMessageInput>
  }

  export type ticketsUpdateWithoutMessageInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profiles_tickets_assignee_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput
    profiles_tickets_customer_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput
    priority_tickets_priorityTopriority?: priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput
    ticket_status?: ticket_statusUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutMessageInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsCreateManyPriority_tickets_priorityTopriorityInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ticketsUpdateWithoutPriority_tickets_priorityTopriorityInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUpdateManyWithoutTicketsNestedInput
    profiles_tickets_assignee_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput
    profiles_tickets_customer_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput
    ticket_status?: ticket_statusUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutPriority_tickets_priorityTopriorityInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutPriority_tickets_priorityTopriorityInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messageCreateManyProfilesInput = {
    id?: bigint | number
    content: string
    ticket_id?: bigint | number | null
    created_at?: Date | string
  }

  export type ticketsCreateManyProfiles_tickets_assignee_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    customer_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ticketsCreateManyProfiles_tickets_customer_idToprofilesInput = {
    id?: bigint | number
    title: string
    description: string
    status?: bigint | number
    priority?: bigint | number
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type messageUpdateWithoutProfilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: ticketsUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateWithoutProfilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    ticket_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyWithoutProfilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    ticket_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketsUpdateWithoutProfiles_tickets_assignee_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUpdateManyWithoutTicketsNestedInput
    profiles_tickets_customer_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput
    priority_tickets_priorityTopriority?: priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput
    ticket_status?: ticket_statusUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutProfiles_tickets_assignee_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUpdateWithoutProfiles_tickets_customer_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUpdateManyWithoutTicketsNestedInput
    profiles_tickets_assignee_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput
    priority_tickets_priorityTopriority?: priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput
    ticket_status?: ticket_statusUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutProfiles_tickets_customer_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: BigIntFieldUpdateOperationsInput | bigint | number
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type profilesCreateManyRolesInput = {
    id?: bigint | number
    created_at?: Date | string
    email: string
    name?: string | null
  }

  export type profilesUpdateWithoutRolesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateWithoutRolesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUncheckedUpdateManyWithoutProfilesNestedInput
    tickets_tickets_assignee_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_assignee_idToprofilesNestedInput
    tickets_tickets_customer_idToprofiles?: ticketsUncheckedUpdateManyWithoutProfiles_tickets_customer_idToprofilesNestedInput
  }

  export type profilesUncheckedUpdateManyWithoutRolesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ticketsCreateManyTicket_statusInput = {
    id?: bigint | number
    title: string
    description: string
    priority?: bigint | number
    customer_id?: bigint | number | null
    assignee_id?: bigint | number | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ticketsUpdateWithoutTicket_statusInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUpdateManyWithoutTicketsNestedInput
    profiles_tickets_assignee_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_assignee_idToprofilesNestedInput
    profiles_tickets_customer_idToprofiles?: profilesUpdateOneWithoutTickets_tickets_customer_idToprofilesNestedInput
    priority_tickets_priorityTopriority?: priorityUpdateOneRequiredWithoutTickets_tickets_priorityTopriorityNestedInput
  }

  export type ticketsUncheckedUpdateWithoutTicket_statusInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: messageUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutTicket_statusInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: BigIntFieldUpdateOperationsInput | bigint | number
    customer_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    assignee_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messageCreateManyTicketsInput = {
    id?: bigint | number
    content: string
    sender_id?: bigint | number | null
    created_at?: Date | string
  }

  export type messageUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: profilesUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    sender_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    content?: StringFieldUpdateOperationsInput | string
    sender_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}